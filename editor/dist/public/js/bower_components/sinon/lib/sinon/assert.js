/**
 * Assertions matching the test spy retrieval interface.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */

(function(e,t){function s(){var e;for(var t=0,n=arguments.length;t<n;++t)e=arguments[t],e||i.fail("fake is not a spy"),typeof e!="function"&&i.fail(e+" is not a function"),typeof e.getCall!="function"&&i.fail(e+" is not stubbed")}function o(e,n){e=e||t;var r=e.fail||i.fail;r.call(e,n)}function u(e,t,n){arguments.length==2&&(n=t,t=e),i[e]=function(u){s(u);var a=r.call(arguments,1),f=!1;typeof t=="function"?f=!t(u):f=typeof u[t]=="function"?!u[t].apply(u,a):!u[t],f?o(this,u.printf.apply(u,[n].concat(a))):i.pass(e)}}function a(e,t){return!e||/^fail/.test(t)?t:e+t.slice(0,1).toUpperCase()+t.slice(1)}var n=typeof module!="undefined"&&module.exports,r=Array.prototype.slice,i;!e&&n&&(e=require("../sinon"));if(!e)return;i={failException:"AssertError",fail:function(t){var n=new Error(t);throw n.name=this.failException||i.failException,n},pass:function(t){},callOrder:function(){s.apply(null,arguments);var n="",u="";if(!e.calledInOrder(arguments)){try{n=[].join.call(arguments,", ");var a=r.call(arguments),f=a.length;while(f)a[--f].called||a.splice(f,1);u=e.orderByFirstCall(a).join(", ")}catch(l){}o(this,"expected "+n+" to be "+"called in order but were called as "+u)}else i.pass("callOrder")},callCount:function(n,r){s(n);if(n.callCount!=r){var u="expected %n to be called "+e.timesInWords(r)+" but was called %c%C";o(this,n.printf(u))}else i.pass("callCount")},expose:function(t,n){if(!t)throw new TypeError("target is null or undefined");var r=n||{},i=typeof r.prefix=="undefined"&&"assert"||r.prefix,s=typeof r.includeFail=="undefined"||!!r.includeFail;for(var o in this)o!="export"&&(s||!/^(fail)/.test(o))&&(t[a(i,o)]=this[o]);return t},match:function(n,r){var s=e.match(r);if(s.test(n))i.pass("match");else{var u=["expected value to match","    expected = "+e.format(r),"    actual = "+e.format(n)];o(this,u.join("\n"))}}},u("called","expected %n to have been called at least once but was never called"),u("notCalled",function(e){return!e.called},"expected %n to not have been called but was called %c%C"),u("calledOnce","expected %n to be called once but was called %c%C"),u("calledTwice","expected %n to be called twice but was called %c%C"),u("calledThrice","expected %n to be called thrice but was called %c%C"),u("calledOn","expected %n to be called with %1 as this but was called with %t"),u("alwaysCalledOn","expected %n to always be called with %1 as this but was called with %t"),u("calledWithNew","expected %n to be called with new"),u("alwaysCalledWithNew","expected %n to always be called with new"),u("calledWith","expected %n to be called with arguments %*%C"),u("calledWithMatch","expected %n to be called with match %*%C"),u("alwaysCalledWith","expected %n to always be called with arguments %*%C"),u("alwaysCalledWithMatch","expected %n to always be called with match %*%C"),u("calledWithExactly","expected %n to be called with exact arguments %*%C"),u("alwaysCalledWithExactly","expected %n to always be called with exact arguments %*%C"),u("neverCalledWith","expected %n to never be called with arguments %*%C"),u("neverCalledWithMatch","expected %n to never be called with match %*%C"),u("threw","%n did not throw exception%C"),u("alwaysThrew","%n did not always throw exception%C"),e.assert=i,typeof define=="function"&&define.amd?define(["module"],function(e){e.exports=i}):n&&(module.exports=i)})(typeof sinon=="object"&&sinon||null,typeof window!="undefined"?window:typeof self!="undefined"?self:global);