/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("../runner"),sinon=require("../../lib/sinon");buster.testCase("sinon.mock",{create:{"returns function with expects method":function(){var e=sinon.mock.create({});assert.isFunction(e.expects)},"throws without object":function(){assert.exception(function(){sinon.mock.create()},"TypeError")}},expects:{setUp:function(){this.mock=sinon.mock.create({someMethod:function(){}})},"throws without method":function(){var e=this.mock;assert.exception(function(){e.expects()},"TypeError")},"returns expectation":function(){var e=this.mock.expects("someMethod");assert.isFunction(e),assert.equals(e.method,"someMethod")},"throws if expecting a non-existent method":function(){var e=this.mock;assert.exception(function(){e.expects("someMethod2")})}},expectation:{setUp:function(){this.method="myMeth",this.expectation=sinon.expectation.create(this.method)},"creates unnamed expectation":function(){var e=sinon.expectation.create();e.never(),assert(e.verify())},"uses 'anonymous mock expectation' for unnamed expectation":function(){var e=sinon.expectation.create();e.once();try{e.verify()}catch(t){assert.match(t.message,"anonymous mock expectation")}},"call expectation":function(){this.expectation(),assert.isFunction(this.expectation.invoke),assert(this.expectation.called)},"is invokable":function(){var e=this.expectation;refute.exception(function(){e()})},returns:{"returns configured return value":function(){var e={};this.expectation.returns(e),assert.same(this.expectation(),e)}},call:{"is called with correct this value":function(){var e={method:this.expectation};e.method(),assert(this.expectation.calledOn(e))}},callCount:{"onlys be invokable once by default":function(){var e=this.expectation;e(),assert.exception(function(){e()},"ExpectationError")},"throw readable error":function(){var e=this.expectation;e();try{e(),buster.assertions.fail("Expected to throw")}catch(t){assert.equals(t.message,"myMeth already called once")}}},callCountNever:{"is not callable":function(){var e=this.expectation;e.never(),assert.exception(function(){e()},"ExpectationError")},"returns expectation for chaining":function(){assert.same(this.expectation.never(),this.expectation)}},callCountOnce:{"allows one call":function(){var e=this.expectation;e.once(),e(),assert.exception(function(){e()},"ExpectationError")},"returns expectation for chaining":function(){assert.same(this.expectation.once(),this.expectation)}},callCountTwice:{"allows two calls":function(){var e=this.expectation;e.twice(),e(),e(),assert.exception(function(){e()},"ExpectationError")},"returns expectation for chaining":function(){assert.same(this.expectation.twice(),this.expectation)}},callCountThrice:{"allows three calls":function(){var e=this.expectation;e.thrice(),e(),e(),e(),assert.exception(function(){e()},"ExpectationError")},"returns expectation for chaining":function(){assert.same(this.expectation.thrice(),this.expectation)}},callCountExactly:{"allows specified number of calls":function(){var e=this.expectation;e.exactly(2),e(),e(),assert.exception(function(){e()},"ExpectationError")},"returns expectation for chaining":function(){assert.same(this.expectation.exactly(2),this.expectation)},"throws without argument":function(){var e=this.expectation;assert.exception(function(){e.exactly()},"TypeError")},"throws without number":function(){var e=this.expectation;assert.exception(function(){e.exactly("12")},"TypeError")}},atLeast:{"throws without argument":function(){var e=this.expectation;assert.exception(function(){e.atLeast()},"TypeError")},"throws without number":function(){var e=this.expectation;assert.exception(function(){e.atLeast({})},"TypeError")},"returns expectation for chaining":function(){assert.same(this.expectation.atLeast(2),this.expectation)},"allows any number of calls":function(){var e=this.expectation;e.atLeast(2),e(),e(),refute.exception(function(){e(),e()})},"should not be met with too few calls":function(){this.expectation.atLeast(2),this.expectation(),assert.isFalse(this.expectation.met())},"is met with exact calls":function(){this.expectation.atLeast(2),this.expectation(),this.expectation(),assert(this.expectation.met())},"is met with excessive calls":function(){this.expectation.atLeast(2),this.expectation(),this.expectation(),this.expectation(),assert(this.expectation.met())},"should not throw when exceeding at least expectation":function(){var e={foobar:function(){}},t=sinon.mock(e);t.expects("foobar").atLeast(1),e.foobar(),refute.exception(function(){e.foobar(),t.verify()})}},atMost:{"throws without argument":function(){var e=this.expectation;assert.exception(function(){e.atMost()},"TypeError")},"throws without number":function(){var e=this.expectation;assert.exception(function(){e.atMost({})},"TypeError")},"returns expectation for chaining":function(){assert.same(this.expectation.atMost(2),this.expectation)},"allows fewer calls":function(){var e=this.expectation;e.atMost(2),refute.exception(function(){e()})},"is met with fewer calls":function(){this.expectation.atMost(2),this.expectation(),assert(this.expectation.met())},"is met with exact calls":function(){this.expectation.atMost(2),this.expectation(),this.expectation(),assert(this.expectation.met())},"should not be met with excessive calls":function(){var e=this.expectation;this.expectation.atMost(2),this.expectation(),this.expectation(),assert.exception(function(){e()},"ExpectationError"),assert.isFalse(this.expectation.met())}},atMostAndAtLeast:{setUp:function(){this.expectation.atLeast(2),this.expectation.atMost(3)},"should not be met with too few calls":function(){this.expectation(),assert.isFalse(this.expectation.met())},"is met with minimum calls":function(){this.expectation(),this.expectation(),assert(this.expectation.met())},"is met with maximum calls":function(){this.expectation(),this.expectation(),this.expectation(),assert(this.expectation.met())},"throws with excessive calls":function(){var e=this.expectation;e(),e(),e(),assert.exception(function(){e()},"ExpectationError")}},met:{"should not be met when not called enough times":function(){assert.isFalse(this.expectation.met())},"is met when called enough times":function(){this.expectation(),assert(this.expectation.met())},"should not be met when called too many times":function(){this.expectation();try{this.expectation()}catch(e){}assert.isFalse(this.expectation.met())}},withArgs:{"returns expectation for chaining":function(){assert.same(this.expectation.withArgs(1),this.expectation)},"accepts call with expected args":function(){this.expectation.withArgs(1,2,3),this.expectation(1,2,3),assert(this.expectation.met())},"throws when called without args":function(){var e=this.expectation;e.withArgs(1,2,3),assert.exception(function(){e()},"ExpectationError")},"throws when called with too few args":function(){var e=this.expectation;e.withArgs(1,2,3),assert.exception(function(){e(1,2)},"ExpectationError")},"throws when called with wrong args":function(){var e=this.expectation;e.withArgs(1,2,3),assert.exception(function(){e(2,2,3)},"ExpectationError")},"allows excessive args":function(){var e=this.expectation;e.withArgs(1,2,3),refute.exception(function(){e(1,2,3,4)})},"calls accept with no args":function(){this.expectation.withArgs(),this.expectation(),assert(this.expectation.met())},"allows no args called with excessive args":function(){var e=this.expectation;e.withArgs(),refute.exception(function(){e(1,2,3)})},"works with sinon matchers":function(){this.expectation.withArgs(sinon.match.number,sinon.match.string,sinon.match.func),this.expectation(1,"test",function(){}),assert(this.expectation.met())},"throws when sinon matchers fail":function(){var e=this.expectation;this.expectation.withArgs(sinon.match.number,sinon.match.string,sinon.match.func),assert.exception(function(){e(1,2,3)},"ExpectationError")}},withExactArgs:{"returns expectation for chaining":function(){assert.same(this.expectation.withExactArgs(1),this.expectation)},"accepts call with expected args":function(){this.expectation.withExactArgs(1,2,3),this.expectation(1,2,3),assert(this.expectation.met())},"throws when called without args":function(){var e=this.expectation;e.withExactArgs(1,2,3),assert.exception(function(){e()},"ExpectationError")},"throws when called with too few args":function(){var e=this.expectation;e.withExactArgs(1,2,3),assert.exception(function(){e(1,2)},"ExpectationError")},"throws when called with wrong args":function(){var e=this.expectation;e.withExactArgs(1,2,3),assert.exception(function(){e(2,2,3)},"ExpectationError")},"should not allow excessive args":function(){var e=this.expectation;e.withExactArgs(1,2,3),assert.exception(function(){e(1,2,3,4)},"ExpectationError")},"accepts call with no expected args":function(){this.expectation.withExactArgs(),this.expectation(),assert(this.expectation.met())},"does not allow excessive args with no expected args":function(){var e=this.expectation;e.withExactArgs(),assert.exception(function(){e(1,2,3)},"ExpectationError")}},on:{"returns expectation for chaining":function(){assert.same(this.expectation.on({}),this.expectation)},"allows calls on object":function(){this.expectation.on(this),this.expectation(),assert(this.expectation.met())},"throws if called on wrong object":function(){var e=this.expectation;e.on({}),assert.exception(function(){e()},"ExpectationError")}},verify:{"pass if met":function(){sinon.stub(sinon.expectation,"pass");var e=this.expectation;e(),e.verify(),assert.equals(sinon.expectation.pass.callCount,1),sinon.expectation.pass.restore()},"throws if not called enough times":function(){var e=this.expectation;assert.exception(function(){e.verify()},"ExpectationError")},"throws readable error":function(){var e=this.expectation;try{e.verify(),buster.assertions.fail("Expected to throw")}catch(t){assert.equals(t.message,"Expected myMeth([...]) once (never called)")}}}},verify:{setUp:function(){this.method=function(){},this.object={method:this.method},this.mock=sinon.mock.create(this.object)},"restores mocks":function(){this.object.method(),this.object.method.call(this.thisValue),this.mock.verify(),assert.same(this.object.method,this.method)},"passes verified mocks":function(){sinon.stub(sinon.expectation,"pass"),this.mock.expects("method").once(),this.object.method(),this.mock.verify(),assert.equals(sinon.expectation.pass.callCount,1),sinon.expectation.pass.restore()},"restores if not met":function(){var e=this.mock;e.expects("method"),assert.exception(function(){e.verify()},"ExpectationError"),assert.same(this.object.method,this.method)},"includes all calls in error message":function(){var e=this.mock;e.expects("method").thrice(),e.expects("method").once().withArgs(42);var t;try{e.verify()}catch(n){t=n.message}assert.equals(t,"Expected method([...]) thrice (never called)\nExpected method(42[, ...]) once (never called)")},"includes exact expected arguments in error message":function(){var e=this.mock;e.expects("method").once().withExactArgs(42);var t;try{e.verify()}catch(n){t=n.message}assert.equals(t,"Expected method(42) once (never called)")},"includes received call count in error message":function(){var e=this.mock;e.expects("method").thrice().withExactArgs(42),this.object.method(42);var t;try{e.verify()}catch(n){t=n.message}assert.equals(t,"Expected method(42) thrice (called once)")},"includes unexpected calls in error message":function(){var e=this.mock;e.expects("method").thrice().withExactArgs(42);var t;try{this.object.method()}catch(n){t=n.message}assert.equals(t,"Unexpected call: method()\n    Expected method(42) thrice (never called)")},"includes met expectations in error message":function(){var e=this.mock;e.expects("method").once().withArgs(1),e.expects("method").thrice().withExactArgs(42),this.object.method(1);var t;try{this.object.method()}catch(n){t=n.message}assert.equals(t,"Unexpected call: method()\n    Expectation met: method(1[, ...]) once\n    Expected method(42) thrice (never called)")},"includes met expectations in error message from verify":function(){var e=this.mock;e.expects("method").once().withArgs(1),e.expects("method").thrice().withExactArgs(42),this.object.method(1);var t;try{e.verify()}catch(n){t=n.message}assert.equals(t,"Expected method(42) thrice (never called)\nExpectation met: method(1[, ...]) once")},"reports min calls in error message":function(){var e=this.mock;e.expects("method").atLeast(1);var t;try{e.verify()}catch(n){t=n.message}assert.equals(t,"Expected method([...]) at least once (never called)")},"reports max calls in error message":function(){var e=this.mock;e.expects("method").atMost(2);var t;try{this.object.method(),this.object.method(),this.object.method()}catch(n){t=n.message}assert.equals(t,"Unexpected call: method()\n    Expectation met: method([...]) at most twice")},"reports min calls in met expectation":function(){var e=this.mock;e.expects("method").atLeast(1),e.expects("method").withArgs(2).once();var t;try{this.object.method(),this.object.method(2),this.object.method(2)}catch(n){t=n.message}assert.equals(t,"Unexpected call: method(2)\n    Expectation met: method([...]) at least once\n    Expectation met: method(2[, ...]) once")},"reports max and min calls in error messages":function(){var e=this.mock;e.expects("method").atLeast(1).atMost(2);var t;try{e.verify()}catch(n){t=n.message}assert.equals(t,"Expected method([...]) at least once and at most twice (never called)")}},mockObject:{setUp:function(){this.method=function(){},this.object={method:this.method},this.mock=sinon.mock.create(this.object)},"mocks object method":function(){this.mock.expects("method"),assert.isFunction(this.object.method),refute.same(this.object.method,this.method)},"reverts mocked method":function(){this.mock.expects("method"),this.object.method.restore(),assert.same(this.object.method,this.method)},"reverts expectation":function(){var e=this.mock.expects("method");this.object.method.restore(),assert.same(this.object.method,this.method)},"reverts mock":function(){var e=this.mock.expects("method");this.mock.restore(),assert.same(this.object.method,this.method)},"verifies mock":function(){var e=this.mock.expects("method");this.object.method();var t=this.mock;refute.exception(function(){assert(t.verify())})},"verifies mock with unmet expectations":function(){var e=this.mock.expects("method"),t=this.mock;assert.exception(function(){assert(t.verify())},"ExpectationError")}},"mock method multiple times":{setUp:function(){this.thisValue={},this.method=function(){},this.object={method:this.method},this.mock=sinon.mock.create(this.object),this.mock.expects("method"),this.mock.expects("method").on(this.thisValue)},"queues expectations":function(){var e=this.object;refute.exception(function(){e.method()})},"starts on next expectation when first is met":function(){var e=this.object;e.method(),assert.exception(function(){e.method()},"ExpectationError")},"fails on last expectation":function(){var e=this.object;e.method(),e.method.call(this.thisValue),assert.exception(function(){e.method()},"ExpectationError")},"allows mock calls in any order":function(){var e={method:function(){}},t=sinon.mock(e);t.expects("method").once().withArgs(42),t.expects("method").twice().withArgs("Yeah"),refute.exception(function(){e.method("Yeah")}),refute.exception(function(){e.method(42)}),assert.exception(function(){e.method(1)}),refute.exception(function(){e.method("Yeah")}),assert.exception(function(){e.method(42)})}},"mock function":{"returns mock method":function(){var e=sinon.mock();assert.isFunction(e),assert.isFunction(e.atLeast),assert.isFunction(e.verify)},"returns mock object":function(){var e=sinon.mock({});assert.isObject(e),assert.isFunction(e.expects),assert.isFunction(e.verify)}},yields:{"invokes only argument as callback":function(){var e=sinon.mock().yields(),t=sinon.spy();e(t),assert(t.calledOnce),assert.equals(t.args[0].length,0)},"throws understandable error if no callback is passed":function(){var e=sinon.mock().yields();try{throw e(),new Error}catch(t){assert.equals(t.message,"stub expected to yield, but no callback was passed.")}}}});