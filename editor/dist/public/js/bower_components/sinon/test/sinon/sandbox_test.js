/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("../runner"),sinon=require("../../lib/sinon");(function(e){var t=typeof XMLHttpRequest!="undefined"||typeof ActiveXObject!="undefined",n=e.XMLHttpRequest,r=e.ActiveXObject;buster.assertions.add("fakeServerWithClock",{assert:function(e,t){return buster.assertions.deepEqual(e,t)&&sinon.fakeServer.create.calledOn(sinon.fakeServerWithClock)},assertMessage:"Expected object ${0} to be a fake server with clock"}),buster.testCase("sinon.sandbox",{"inherits collection":function(){assert(sinon.collection.isPrototypeOf(sinon.sandbox))},"creates sandboxes":function(){var e=sinon.sandbox.create();assert.isObject(e),assert(sinon.sandbox.isPrototypeOf(e))},useFakeTimers:{setUp:function(){this.sandbox=sinon.create(sinon.sandbox)},tearDown:function(){this.sandbox.clock.restore()},"returns clock object":function(){var e=this.sandbox.useFakeTimers();assert.isObject(e),assert.isFunction(e.tick)},"exposes clock property":function(){this.sandbox.useFakeTimers(),assert.isObject(this.sandbox.clock),assert.isFunction(this.sandbox.clock.tick)},"uses restorable clock":function(){this.sandbox.useFakeTimers(),assert.isFunction(this.sandbox.clock.restore)},"passes arguments to sinon.useFakeTimers":sinon.test(function(){this.stub(sinon,"useFakeTimers").returns({restore:function(){}}),this.sandbox.useFakeTimers("Date","setTimeout"),this.sandbox.useFakeTimers("setTimeout","clearTimeout","setInterval"),assert(sinon.useFakeTimers.calledWith("Date","setTimeout")),assert(sinon.useFakeTimers.calledWith("setTimeout","clearTimeout","setInterval"))}),"adds clock to fake collection":function(){this.sandbox.useFakeTimers(),this.sandbox.restore(),assert.same(setTimeout,sinon.timers.setTimeout)}},"fake XHR/server":{requiresSupportFor:{browser:typeof window!="undefined"},useFakeXMLHttpRequest:{setUp:function(){this.sandbox=sinon.create(sinon.sandbox)},tearDown:function(){this.sandbox.restore()},"calls sinon.useFakeXMLHttpRequest":sinon.test(function(){this.stub(sinon,"useFakeXMLHttpRequest").returns({restore:function(){}}),this.sandbox.useFakeXMLHttpRequest(),assert(sinon.useFakeXMLHttpRequest.called)}),"adds fake xhr to fake collection":function(){this.sandbox.useFakeXMLHttpRequest(),this.sandbox.restore(),assert.same(e.XMLHttpRequest,n),assert.same(e.ActiveXObject,r)}},useFakeServer:{setUp:function(){this.sandbox=sinon.create(sinon.sandbox)},tearDown:function(){this.sandbox.restore()},"returns server":function(){var e=this.sandbox.useFakeServer();assert.isObject(e),assert.isFunction(e.restore)},"exposes server property":function(){var e=this.sandbox.useFakeServer();assert.same(this.sandbox.server,e)},"creates server":function(){var e=this.sandbox.useFakeServer();assert(sinon.fakeServer.isPrototypeOf(e))},"creates server with cock":function(){this.sandbox.serverPrototype=sinon.fakeServerWithClock;var e=this.sandbox.useFakeServer();assert(sinon.fakeServerWithClock.isPrototypeOf(e))},"adds server to fake collection":function(){this.sandbox.useFakeServer(),this.sandbox.restore(),assert.same(e.XMLHttpRequest,n),assert.same(e.ActiveXObject,r)}}},inject:{setUp:function(){this.obj={},this.sandbox=sinon.create(sinon.sandbox)},tearDown:function(){this.sandbox.restore()},"injects spy, stub, mock":function(){this.sandbox.inject(this.obj),assert.isFunction(this.obj.spy),assert.isFunction(this.obj.stub),assert.isFunction(this.obj.mock)},"does not define clock, server and requests objects":function(){this.sandbox.inject(this.obj),assert.isFalse("clock"in this.obj),assert.isFalse("server"in this.obj),assert.isFalse("requests"in this.obj)},"defines clock when using fake time":function(){this.sandbox.useFakeTimers(),this.sandbox.inject(this.obj),assert.isFunction(this.obj.spy),assert.isFunction(this.obj.stub),assert.isFunction(this.obj.mock),assert.isObject(this.obj.clock),assert.isFalse("server"in this.obj),assert.isFalse("requests"in this.obj)},"should return object":function(){var e=this.sandbox.inject({});assert.isObject(e),assert.isFunction(e.spy)},"ajax options":{requiresSupportFor:{"ajax/browser":t},"defines server and requests when using fake time":function(){this.sandbox.useFakeServer(),this.sandbox.inject(this.obj),assert.isFunction(this.obj.spy),assert.isFunction(this.obj.stub),assert.isFunction(this.obj.mock),assert.isFalse("clock"in this.obj),assert.isObject(this.obj.server),assert.equals(this.obj.requests,[])},"should define all possible fakes":function(){this.sandbox.useFakeServer(),this.sandbox.useFakeTimers(),this.sandbox.inject(this.obj);var e=sinon.spy();setTimeout(e,10),this.sandbox.clock.tick(10);var t=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");assert.isFunction(this.obj.spy),assert.isFunction(this.obj.stub),assert.isFunction(this.obj.mock),assert(e.called),assert.isObject(this.obj.server),assert.equals(this.obj.requests,[t])}}},"configurable sandbox":{setUp:function(){this.requests=[],this.fakeServer={requests:this.requests},this.clock={},sinon.stub(sinon,"useFakeTimers").returns(this.clock),sinon.fakeServer&&sinon.stub(sinon.fakeServer,"create").returns(this.fakeServer)},tearDown:function(){sinon.useFakeTimers.restore(),sinon.fakeServer&&sinon.fakeServer.create.restore()},"yields stub, mock as arguments":function(){var e=sinon.sandbox.create(sinon.getConfig({injectIntoThis:!1,properties:["stub","mock"]}));assert.equals(e.args.length,2),assert.stub(e.args[0]()),assert.mock(e.args[1]({}))},"yields spy, stub, mock as arguments":function(){var e=sinon.sandbox.create(sinon.getConfig({injectIntoThis:!1,properties:["spy","stub","mock"]}));assert.spy(e.args[0]()),assert.stub(e.args[1]()),assert.mock(e.args[2]({}))},"does not yield server when not faking xhr":function(){var e=sinon.sandbox.create(sinon.getConfig({injectIntoThis:!1,properties:["server","stub","mock"],useFakeServer:!1}));assert.equals(e.args.length,2),assert.stub(e.args[0]()),assert.mock(e.args[1]({}))},"does not inject properties if they are already present":function(){var e=function(){},t={},n=!1,r={server:e,clock:t,spy:n};sinon.sandbox.create(sinon.getConfig({properties:["server","clock","spy"],injectInto:r})),assert.same(r.server,e),assert.same(r.clock,t),assert.same(r.spy,n)},"ajax options":{requiresSupportFor:{"ajax/browser":t},"yields server when faking xhr":function(){var e=sinon.sandbox.create(sinon.getConfig({injectIntoThis:!1,properties:["server","stub","mock"]}));assert.equals(e.args.length,3),assert.equals(e.args[0],this.fakeServer),assert.stub(e.args[1]()),assert.mock(e.args[2]({}))},"uses serverWithClock when faking xhr":function(){var e=sinon.sandbox.create(sinon.getConfig({injectIntoThis:!1,properties:["server"],useFakeServer:sinon.fakeServerWithClock}));assert.fakeServerWithClock(e.args[0],this.fakeServer)},"yields clock when faking timers":function(){var e=sinon.sandbox.create(sinon.getConfig({injectIntoThis:!1,properties:["server","clock"]}));assert.same(e.args[0],this.fakeServer),assert.same(e.args[1],this.clock)},"injects properties into object":function(){var e={},t=sinon.sandbox.create(sinon.getConfig({properties:["server","clock"],injectInto:e}));assert.equals(t.args.length,0),assert.equals(e.server,this.fakeServer),assert.equals(e.clock,this.clock),refute.defined(e.spy),refute.defined(e.stub),refute.defined(e.mock),refute.defined(e.requests)},"should inject server and clock when only enabling them":function(){var e={},t=sinon.sandbox.create(sinon.getConfig({injectInto:e,useFakeTimers:!0,useFakeServer:!0}));assert.equals(t.args.length,0),assert.equals(e.server,this.fakeServer),assert.equals(e.clock,this.clock),assert.isFunction(e.spy),assert.isFunction(e.stub),assert.isFunction(e.mock),assert.isArray(e.requests),refute.defined(e.sandbox)}},"fakes specified timers":function(){sinon.sandbox.create(sinon.getConfig({injectIntoThis:!1,properties:["clock"],useFakeTimers:["Date","setTimeout"]})),assert(sinon.useFakeTimers.calledWith("Date","setTimeout"))},"injects sandbox":function(){var e={},t=sinon.sandbox.create(sinon.getConfig({properties:["sandbox","spy"],injectInto:e}));assert.equals(t.args.length,0),assert.isFunction(e.spy),assert.isObject(e.sandbox)}}})})(typeof global=="object"?global:window);