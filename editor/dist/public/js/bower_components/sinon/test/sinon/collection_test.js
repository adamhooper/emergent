/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("../runner"),sinon=require("../../lib/sinon");buster.testCase("sinon.collection",{"creates fake collection":function(){var e=sinon.create(sinon.collection);assert.isFunction(e.verify),assert.isFunction(e.restore),assert.isFunction(e.verifyAndRestore),assert.isFunction(e.stub),assert.isFunction(e.mock)},stub:{setUp:function(){this.stub=sinon.stub,this.collection=sinon.create(sinon.collection)},tearDown:function(){sinon.stub=this.stub},"calls stub":function(){var e={method:function(){}},t;sinon.stub=function(){t=Array.prototype.slice.call(arguments)},this.collection.stub(e,"method"),assert.equals(t,[e,"method"])},"adds stub to fake array":function(){var e={method:function(){}};sinon.stub=function(){return e},this.collection.stub(e,"method"),assert.equals(this.collection.fakes,[e])},"appends stubs to fake array":function(){var e=[{id:42},{id:17}],t=0;sinon.stub=function(){return e[t++]},this.collection.stub({method:function(){}},"method"),this.collection.stub({method:function(){}},"method"),assert.equals(this.collection.fakes,e)},"adds all object methods to fake array":function(){var e={method:function(){},method2:function(){}};sinon.stub=function(){return e},this.collection.stub(e),assert.equals(this.collection.fakes,[e.method,e.method2]),assert.equals(this.collection.fakes.length,2)},"returns a stubbed object":function(){var e={method:function(){}};sinon.stub=function(){return e},assert.equals(this.collection.stub(e),e)},"returns a stubbed method":function(){var e={method:function(){}};sinon.stub=function(){return e.method},assert.equals(this.collection.stub(e,"method"),e.method)},"on node":{requiresSupportFor:{process:typeof process!="undefined"},setUp:function(){process.env.HELL="Ain't too bad"},"stubs environment property":function(){this.collection.stub(process.env,"HELL","froze over"),assert.equals(process.env.HELL,"froze over")}}},stubAnything:{setUp:function(){this.object={property:42},this.collection=sinon.create(sinon.collection)},"stubs number property":function(){this.collection.stub(this.object,"property",1),assert.equals(this.object.property,1)},"restores number property":function(){this.collection.stub(this.object,"property",1),this.collection.restore(),assert.equals(this.object.property,42)},"fails if property does not exist":function(){var e=this.collection,t={};assert.exception(function(){e.stub(t,"prop",1)})}},mock:{setUp:function(){this.mock=sinon.mock,this.collection=sinon.create(sinon.collection)},tearDown:function(){sinon.mock=this.mock},"calls mock":function(){var e={id:42},t;sinon.mock=function(){t=Array.prototype.slice.call(arguments)},this.collection.mock(e,"method"),assert.equals(t,[e,"method"])},"adds mock to fake array":function(){var e={id:42};sinon.mock=function(){return e},this.collection.mock(e,"method"),assert.equals(this.collection.fakes,[e])},"appends mocks to fake array":function(){var e=[{id:42},{id:17}],t=0;sinon.mock=function(){return e[t++]},this.collection.mock({},"method"),this.collection.mock({},"method"),assert.equals(this.collection.fakes,e)}},stubAndMockTest:{setUp:function(){this.mock=sinon.mock,this.stub=sinon.stub,this.collection=sinon.create(sinon.collection)},tearDown:function(){sinon.mock=this.mock,sinon.stub=this.stub},"appends mocks and stubs to fake array":function(){var e=[{id:42},{id:17}],t=0;sinon.stub=sinon.mock=function(){return e[t++]},this.collection.mock({method:function(){}},"method"),this.collection.stub({method:function(){}},"method"),assert.equals(this.collection.fakes,e)}},verify:{setUp:function(){this.collection=sinon.create(sinon.collection)},"calls verify on all fakes":function(){this.collection.fakes=[{verify:sinon.spy.create()},{verify:sinon.spy.create()}],this.collection.verify(),assert(this.collection.fakes[0].verify.called),assert(this.collection.fakes[1].verify.called)}},restore:{setUp:function(){this.collection=sinon.create(sinon.collection),this.collection.fakes=[{restore:sinon.spy.create()},{restore:sinon.spy.create()}]},"calls restore on all fakes":function(){var e=this.collection.fakes[0],t=this.collection.fakes[1];this.collection.restore(),assert(e.restore.called),assert(t.restore.called)},"removes from collection when restored":function(){this.collection.restore(),assert(this.collection.fakes.length==0)},"restores functions when stubbing entire object":function(){var e=function(){},t=function(){},n={a:e,b:t};this.collection.stub(n),this.collection.restore(),assert.same(n.a,e),assert.same(n.b,t)}},verifyAndRestore:{setUp:function(){this.collection=sinon.create(sinon.collection)},"calls verify and restore":function(){this.collection.verify=sinon.spy.create(),this.collection.restore=sinon.spy.create(),this.collection.verifyAndRestore(),assert(this.collection.verify.called),assert(this.collection.restore.called)},"throws when restore throws":function(){this.collection.verify=sinon.spy.create(),this.collection.restore=sinon.stub.create().throws(),assert.exception(function(){this.collection.verifyAndRestore()})},"calls restore when restore throws":function(){this.collection.verify=sinon.spy.create(),this.collection.restore=sinon.stub.create().throws();try{this.collection.verifyAndRestore()}catch(e){}assert(this.collection.restore.called)}},injectTest:{setUp:function(){this.collection=sinon.create(sinon.collection)},"injects fakes into object":function(){var e={};this.collection.inject(e),assert.isFunction(e.spy),assert.isFunction(e.stub),assert.isFunction(e.mock)},"returns argument":function(){var e={};assert.same(this.collection.inject(e),e)},"injects spy, stub, mock bound to collection":sinon.test(function(){var e={};this.collection.inject(e),this.stub(this.collection,"spy"),this.stub(this.collection,"stub"),this.stub(this.collection,"mock"),e.spy();var t=e.spy;t(),e.stub(),t=e.stub,t(),e.mock(),t=e.mock,t(),assert(this.collection.spy.calledTwice),assert(this.collection.stub.calledTwice),assert(this.collection.mock.calledTwice)})}});