/**
* @author Maximilian Antoni (mail@maxantoni.de)
* @license BSD
*
* Copyright (c) 2012 Maximilian Antoni
* Copyright (c) 2012 Christian Johansen
 */

function propertyMatcherTests(e){return{"returns matcher":function(){var t=e("foo");assert(sinon.match.isMatcher(t))},"throws if first argument is not string":function(){assert.exception(function(){e()},"TypeError"),assert.exception(function(){e(123)},"TypeError")},"returns false if value is undefined or null":function(){var t=e("foo");assert.isFalse(t.test(undefined)),assert.isFalse(t.test(null))},"returns true if object has property":function(){var t=e("foo");assert(t.test({foo:null}))},"returns false if object value is not equal to given value":function(){var t=e("foo",1);assert.isFalse(t.test({foo:null}))},"returns true if object value is equal to given value":function(){var t=e("message","sinon rocks");assert(t.test({message:"sinon rocks"})),assert(t.test(new Error("sinon rocks")))},"returns true if string property matches":function(){var t=e("length",5);assert(t.test("sinon"))},"allows to expect undefined":function(){var t=e("foo",undefined);assert.isFalse(t.test({foo:1}))},"compares value deeply":function(){var t=e("foo",{bar:"doo",test:42});assert(t.test({foo:{bar:"doo",test:42}}))},"compares with matcher":function(){var t=e("callback",sinon.match.typeOf("function"));assert(t.test({callback:function(){}}))}}}if(typeof require=="function"&&typeof module=="object")var testCase=require("../runner"),sinon=require("../../lib/sinon");buster.testCase("sinon.match",{"returns matcher":function(){var e=sinon.match(function(){});assert(sinon.match.isMatcher(e))},"exposes test function":function(){var e=function(){},t=sinon.match(e);assert.same(t.test,e)},"returns true if properties are equal":function(){var e=sinon.match({str:"sinon",nr:1});assert(e.test({str:"sinon",nr:1,other:"ignored"}))},"returns true if properties are deep equal":function(){var e=sinon.match({deep:{str:"sinon"}});assert(e.test({deep:{str:"sinon",ignored:"value"}}))},"returns false if a property is not equal":function(){var e=sinon.match({str:"sinon",nr:1});assert.isFalse(e.test({str:"sinon",nr:2}))},"returns false if a property is missing":function(){var e=sinon.match({str:"sinon",nr:1});assert.isFalse(e.test({nr:1}))},"returns true if array is equal":function(){var e=sinon.match({arr:["a","b"]});assert(e.test({arr:["a","b"]}))},"returns false if array is not equal":function(){var e=sinon.match({arr:["b","a"]});assert.isFalse(e.test({arr:["a","b"]}))},"returns true if number objects are equal":function(){var e=sinon.match({one:new Number(1)});assert(e.test({one:new Number(1)}))},"returns true if test matches":function(){var e=sinon.match({prop:sinon.match.typeOf("boolean")});assert(e.test({prop:!0}))},"returns false if test does not match":function(){var e=sinon.match({prop:sinon.match.typeOf("boolean")});assert.isFalse(e.test({prop:"no"}))},"returns true if deep test matches":function(){var e=sinon.match({deep:{prop:sinon.match.typeOf("boolean")}});assert(e.test({deep:{prop:!0}}))},"returns false if deep test does not match":function(){var e=sinon.match({deep:{prop:sinon.match.typeOf("boolean")}});assert.isFalse(e.test({deep:{prop:"no"}}))},"returns false if tested value is null or undefined":function(){var e=sinon.match({});assert.isFalse(e.test(null)),assert.isFalse(e.test(undefined))},"returns true if error message matches":function(){var e=sinon.match({message:"evil error"});assert(e.test(new Error("evil error")))},"returns true if string property matches":function(){var e=sinon.match({length:5});assert(e.test("sinon"))},"returns true if number property matches":function(){var e=sinon.match({toFixed:sinon.match.func});assert(e.test(0))},"returns true for string match":function(){var e=sinon.match("sinon");assert(e.test("sinon"))},"returns true for substring match":function(){var e=sinon.match("no");assert(e.test("sinon"))},"returns false for string mismatch":function(){var e=sinon.match("Sinon.JS");assert.isFalse(e.test(null)),assert.isFalse(e.test({})),assert.isFalse(e.test("sinon")),assert.isFalse(e.test("sinon.js"))},"returns true for regexp match":function(){var e=sinon.match(/^[sino]+$/);assert(e.test("sinon"))},"returns false for regexp string mismatch":function(){var e=sinon.match(/^[sin]+$/);assert.isFalse(e.test("sinon"))},"returns false for regexp type mismatch":function(){var e=sinon.match(/.*/);assert.isFalse(e.test()),assert.isFalse(e.test(null)),assert.isFalse(e.test(123)),assert.isFalse(e.test({}))},"returns true for number match":function(){var e=sinon.match(1);assert(e.test(1)),assert(e.test("1")),assert(e.test(!0))},"returns false for number mismatch":function(){var e=sinon.match(1);assert.isFalse(e.test()),assert.isFalse(e.test(null)),assert.isFalse(e.test(2)),assert.isFalse(e.test(!1)),assert.isFalse(e.test({}))},"returns true if test function in object returns true":function(){var e=sinon.match({test:function(){return!0}});assert(e.test())},"returns false if test function in object returns false":function(){var e=sinon.match({test:function(){return!1}});assert.isFalse(e.test())},"returns false if test function in object returns nothing":function(){var e=sinon.match({test:function(){}});assert.isFalse(e.test())},"passes actual value to test function in object":function(){var e=sinon.match({test:function(e){return e}});assert(e.test(!0))},"uses matcher":function(){var e=sinon.match(sinon.match("test"));assert(e.test("testing"))},toString:{"returns message":function(){var e="hello sinon.match",t=sinon.match(function(){},e);assert.same(t.toString(),e)},"defaults to match(functionName)":function(){var e=sinon.match(function(){});assert.same(e.toString(),"match(custom)")}},any:{"is matcher":function(){assert(sinon.match.isMatcher(sinon.match.any))},"returns true when tested":function(){assert(sinon.match.any.test())}},defined:{"is matcher":function(){assert(sinon.match.isMatcher(sinon.match.defined))},"returns false if test is called with null":function(){assert.isFalse(sinon.match.defined.test(null))},"returns false if test is called with undefined":function(){assert.isFalse(sinon.match.defined.test(undefined))},"returns true if test is called with any value":function(){assert(sinon.match.defined.test(!1)),assert(sinon.match.defined.test(!0)),assert(sinon.match.defined.test(0)),assert(sinon.match.defined.test(1)),assert(sinon.match.defined.test(""))},"returns true if test is called with any object":function(){assert(sinon.match.defined.test({})),assert(sinon.match.defined.test(function(){}))}},truthy:{"is matcher":function(){assert(sinon.match.isMatcher(sinon.match.truthy))},"returns true if test is called with trueish value":function(){assert(sinon.match.truthy.test(!0)),assert(sinon.match.truthy.test(1)),assert(sinon.match.truthy.test("yes"))},"returns false if test is called falsy value":function(){assert.isFalse(sinon.match.truthy.test(!1)),assert.isFalse(sinon.match.truthy.test(null)),assert.isFalse(sinon.match.truthy.test(undefined)),assert.isFalse(sinon.match.truthy.test(""))}},falsy:{"is matcher":function(){assert(sinon.match.isMatcher(sinon.match.falsy))},"returns true if test is called falsy value":function(){assert(sinon.match.falsy.test(!1)),assert(sinon.match.falsy.test(null)),assert(sinon.match.falsy.test(undefined)),assert(sinon.match.falsy.test(""))},"returns false if test is called with trueish value":function(){assert.isFalse(sinon.match.falsy.test(!0)),assert.isFalse(sinon.match.falsy.test(1)),assert.isFalse(sinon.match.falsy.test("yes"))}},same:{"returns matcher":function(){var e=sinon.match.same();assert(sinon.match.isMatcher(e))},"returns true if test is called with same argument":function(){var e={},t=sinon.match.same(e);assert(t.test(e))},"returns false if test is not called with same argument":function(){var e=sinon.match.same({});assert.isFalse(e.test({}))}},typeOf:{"throws if given argument is not a string":function(){assert.exception(function(){sinon.match.typeOf()},"TypeError"),assert.exception(function(){sinon.match.typeOf(123)},"TypeError")},"returns matcher":function(){var e=sinon.match.typeOf("string");assert(sinon.match.isMatcher(e))},"returns true if test is called with string":function(){var e=sinon.match.typeOf("string");assert(e.test("Sinon.JS"))},"returns false if test is not called with string":function(){var e=sinon.match.typeOf("string");assert.isFalse(e.test(123))},"returns true if test is called with regexp":function(){var e=sinon.match.typeOf("regexp");assert(e.test(/.+/))},"returns false if test is not called with regexp":function(){var e=sinon.match.typeOf("regexp");assert.isFalse(e.test(!0))}},instanceOf:{"throws if given argument is not a function":function(){assert.exception(function(){sinon.match.instanceOf()},"TypeError"),assert.exception(function(){sinon.match.instanceOf("foo")},"TypeError")},"returns matcher":function(){var e=sinon.match.instanceOf(function(){});assert(sinon.match.isMatcher(e))},"returns true if test is called with instance of argument":function(){var e=sinon.match.instanceOf(Array);assert(e.test([]))},"returns false if test is not called with instance of argument":function(){var e=sinon.match.instanceOf(Array);assert.isFalse(e.test({}))}},has:propertyMatcherTests(sinon.match.has),hasOwn:propertyMatcherTests(sinon.match.hasOwn),hasSpecial:{"returns true if object has inherited property":function(){var e=sinon.match.has("toString");assert(e.test({}))},"only includes property in message":function(){var e=sinon.match.has("test");assert.equals(e.toString(),'has("test")')},"includes property and value in message":function(){var e=sinon.match.has("test",undefined);assert.equals(e.toString(),'has("test", undefined)')},"returns true if string function matches":function(){var e=sinon.match.has("toUpperCase",sinon.match.func);assert(e.test("sinon"))},"returns true if number function matches":function(){var e=sinon.match.has("toFixed",sinon.match.func);assert(e.test(0))}},hasOwnSpecial:{"returns false if object has inherited property":function(){var e=sinon.match.hasOwn("toString");assert.isFalse(e.test({}))},"only includes property in message":function(){var e=sinon.match.hasOwn("test");assert.equals(e.toString(),'hasOwn("test")')},"includes property and value in message":function(){var e=sinon.match.hasOwn("test",undefined);assert.equals(e.toString(),'hasOwn("test", undefined)')}},bool:{"is typeOf boolean matcher":function(){var e=sinon.match.bool;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("boolean")')}},number:{"is typeOf number matcher":function(){var e=sinon.match.number;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("number")')}},string:{"is typeOf string matcher":function(){var e=sinon.match.string;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("string")')}},object:{"is typeOf object matcher":function(){var e=sinon.match.object;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("object")')}},func:{"is typeOf function matcher":function(){var e=sinon.match.func;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("function")')}},array:{"is typeOf array matcher":function(){var e=sinon.match.array;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("array")')}},regexp:{"is typeOf regexp matcher":function(){var e=sinon.match.regexp;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("regexp")')}},date:{"is typeOf regexp matcher":function(){var e=sinon.match.date;assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("date")')}},or:{"is matcher":function(){var e=sinon.match.number.or(sinon.match.string);assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'typeOf("number").or(typeOf("string"))')},"requires matcher argument":function(){assert.exception(function(){sinon.match.instanceOf(Error).or()},"TypeError")},"will coerce argument to matcher":function(){var e=sinon.match("abc").or("def");assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'match("abc").or(match("def"))')},"returns true if either matcher matches":function(){var e=sinon.match.number.or(sinon.match.string);assert(e.test(123)),assert(e.test("abc"))},"returns false if neither matcher matches":function(){var e=sinon.match.number.or("abc");assert.isFalse(e.test(/.+/)),assert.isFalse(e.test(new Date)),assert.isFalse(e.test({}))},"can be used with undefined":function(){var e=sinon.match.number.or(undefined);assert(e.test(123)),assert(e.test(undefined))}},and:{"is matcher":function(){var e=sinon.match.has("foo").and(sinon.match.has("bar"));assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'has("foo").and(has("bar"))')},"requires matcher argument":function(){assert.exception(function(){sinon.match.instanceOf(Error).and()},"TypeError")},"will coerce to matcher":function(){var e=sinon.match("abc").or({a:1});assert(sinon.match.isMatcher(e)),assert.equals(e.toString(),'match("abc").or(match(a: 1))')},"returns true if both matchers match":function(){var e=sinon.match.has("foo").and({bar:"bar"});assert(e.test({foo:"foo",bar:"bar"}))},"returns false if either matcher does not match":function(){var e=sinon.match.has("foo").and(sinon.match.has("bar"));assert.isFalse(e.test({foo:"foo"})),assert.isFalse(e.test({bar:"bar"}))},"can be used with undefined":function(){var e=sinon.match.falsy.and(undefined);assert.isFalse(e.test(!1)),assert(e.test(undefined))}}});