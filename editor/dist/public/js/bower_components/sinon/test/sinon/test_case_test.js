/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("../runner"),sinon=require("../../lib/sinon");buster.testCase("sinon.testCase",{"throws without argument":function(){assert.exception(function(){sinon.testCase()},"TypeError")},"throws without object":function(){assert.exception(function(){sinon.testCase(function(){})},"TypeError")},"only wraps functions with test prefix":sinon.test(function(){this.spy(sinon,"test");var e={testA:function(){},doB:function(){}};sinon.testCase(e),assert.isFunction(e.doB),assert(sinon.test.calledWith(e.testA)),assert.isFalse(sinon.test.calledWith(e.doB))}),"removes setUp method":function(){var e={setUp:function(){}},t=sinon.testCase(e);refute.defined(t.setUp),refute.defined(t["test setUp"])},"removes tearDown method":function(){var e={tearDown:function(){}},t=sinon.testCase(e);refute.defined(t.tearDown),refute.defined(t["test tearDown"])},"calls setUp before any test":function(){var e={setUp:sinon.stub(),test:sinon.stub(),test2:sinon.stub()},t=sinon.testCase(e);t.test(),t.test2(),assert.equals(e.setUp.callCount,2),sinon.assert.called(e.test),sinon.assert.called(e.test2)},"calls tearDown after any test":function(){var e={tearDown:sinon.stub(),test:sinon.stub(),test2:sinon.stub()},t=sinon.testCase(e);t.test(),t.test2(),refute.exception(function(){sinon.assert.called(e.tearDown),sinon.assert.called(e.test),sinon.assert.called(e.test2)})},"calls tearDown even if test throws":function(){var e={tearDown:sinon.stub(),test:sinon.stub().throws()},t=sinon.testCase(e);assert.exception(function(){t.test()},"Error"),sinon.assert.called(e.tearDown),sinon.assert.called(e.test)},"calls setUp test tearDown in order":function(){var e={setUp:sinon.stub(),test:sinon.stub(),tearDown:sinon.stub()},t=sinon.testCase(e);try{t.test()}catch(n){}refute.exception(function(){sinon.assert.callOrder(e.setUp,e.test,e.tearDown)})},"calls in order when test throws":function(){var e={setUp:sinon.stub(),tearDown:sinon.stub(),test:sinon.stub().throws()},t=sinon.testCase(e);try{t.test()}catch(n){}refute.exception(function(){sinon.assert.callOrder(e.setUp,e.test,e.tearDown)})},"unstubs objects after test is run":function(){var e=function(){},t={meth:e},n=sinon.testCase({testA:function(){this.stub(t,"meth"),assert.isFunction(this.stub),refute.same(t.meth,e)}});n.testA(),assert.same(t.meth,e)},"unstubs all methods of an objects after test is run":function(){var e=function(){},t=function(){},n={meth:e,meth2:t},r=sinon.testCase({testA:function(){this.stub(n),assert.isFunction(this.stub),refute.same(n.meth,e),refute.same(n.meth2,t)}});r.testA(),assert.same(n.meth,e),assert.same(n.meth2,t)},"unstubs objects stubbed in setUp":function(){var e=function(){},t={meth:e},n=sinon.testCase({setUp:function(){this.stub(t,"meth")},testA:function(){assert.isFunction(this.stub),refute.same(t.meth,e)}});n.testA(),assert.same(t.meth,e)},"unstubs all methods of an objects stubbed in setUp":function(){var e=function(){},t=function(){},n={meth:e,meth2:t},r=sinon.testCase({setUp:function(){this.stub(n)},testA:function(){assert.isFunction(this.stub),refute.same(n.meth,e),refute.same(n.meth2,t)}});r.testA(),assert.same(n.meth,e),assert.same(n.meth2,t)},"allows the use of helper methods":function(){var e=sinon.spy(),t=sinon.testCase({doIt:e,testIt:function(){this.doIt()}});refute.exception(function(){t.testIt()}),assert(e.calledOnce),assert(e.calledOn(t))},"returns result of test function":function(){var e=sinon.testCase({testIt:sinon.stub().returns(42)});assert.equals(e.testIt(),42)},"returns result of test function with setUp":function(){var e=sinon.testCase({setUp:sinon.spy(),testIt:sinon.stub().returns(42)});assert.equals(e.testIt(),42)},"returns result of test function with setUp and teardown":function(){var e=sinon.testCase({setUp:sinon.spy(),tearDown:sinon.spy(),testIt:sinon.stub().returns(42)});assert.equals(e.testIt(),42)}});