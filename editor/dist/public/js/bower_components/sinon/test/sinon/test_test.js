/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("../runner"),sinon=require("../../lib/sinon");buster.testCase("sinon.test",{setUp:function(){this.boundTestCase=function(){var e={fn:function(){e.self=this,e.args=arguments,e.spy=this.spy,e.stub=this.stub,e.mock=this.mock,e.clock=this.clock,e.server=this.server,e.requests=this.requests,e.sandbox=this.sandbox}};return e}},tearDown:function(){sinon.config={}},"throws if argument is not a function":function(){assert.exception(function(){sinon.test({})})},"proxys return value":function(){var e={},t=sinon.test(function(){return e})();assert.same(t,e)},"stubs inside sandbox":function(){var e=function(){},t={method:e};sinon.test(function(){this.stub(t,"method").returns(t),assert.same(t.method(),t)}).call({})},"restores stubs":function(){var e=function(){},t={method:e};sinon.test(function(){this.stub(t,"method")}).call({}),assert.same(t.method,e)},"restores stubs on all object methods":function(){var e=function(){},t=function(){},n={method:e,method2:t};sinon.test(function(){this.stub(n)}).call({}),assert.same(n.method,e),assert.same(n.method2,t)},"throws when method throws":function(){var e=function(){},t={method:e};assert.exception(function(){sinon.test(function(){throw this.stub(t,"method"),new Error}).call({})},"Error")},"restores stub when method throws":function(){var e=function(){},t={method:e};try{sinon.test(function(){throw this.stub(t,"method"),new Error}).call({})}catch(n){}assert.same(t.method,e)},"mocks inside sandbox":function(){var e=function(){},t={method:e};sinon.test(function(){this.mock(t).expects("method").returns(t),assert.same(t.method(),t)}).call({})},"verifies mocks":function(){var e=function(){},t={method:e},n;try{sinon.test(function(){this.mock(t).expects("method").withExactArgs(1).once(),t.method(42)}).call({})}catch(r){n=r}assert.same(n.name,"ExpectationError"),assert.equals(n.message,"Unexpected call: method(42)\n    Expected method(1) once (never called)"),assert.same(t.method,e)},"restores mocks":function(){var e=function(){},t={method:e};try{sinon.test(function(){this.mock(t).expects("method")}).call({})}catch(n){}assert.same(t.method,e)},"restores mock when method throws":function(){var e=function(){},t={method:e};try{sinon.test(function(){this.mock(t).expects("method").never(),t.method()}).call({})}catch(n){}assert.same(t.method,e)},"appends helpers after normal arguments":function(){var e={method:function(){}};sinon.config={injectIntoThis:!1,properties:["stub","mock"]},sinon.test(function(t,n,r){r(e).expects("method").once(),e.method(),assert.same(t,e)})(e)},"maintains the this value":function(){var e={someTest:sinon.test(function(e,t,n){return this})};assert.same(e.someTest(),e)},"configurable test with sandbox":{tearDown:function(){sinon.config={}},"yields stub, mock as arguments":function(){var e,t,n={meth:function(){}};sinon.config={injectIntoThis:!1,properties:["stub","mock"]},sinon.test(function(r,i){e=r(n,"meth"),t=i(n),assert.equals(arguments.length,2)})(),assert.stub(e),assert.mock(t)},"yields spy, stub, mock as arguments":function(){var e,t,n,r={meth:function(){}};sinon.config={injectIntoThis:!1,properties:["spy","stub","mock"]},sinon.test(function(i,s,o){e=i(r,"meth"),e.restore(),t=s(r,"meth"),n=o(r),assert.equals(arguments.length,3)})(),assert.spy(e),assert.stub(t),assert.mock(n)},"does not yield server when not faking xhr":function(){var e,t,n={meth:function(){}};sinon.config={injectIntoThis:!1,properties:["server","stub","mock"],useFakeServer:!1},sinon.test(function(r,i){e=r(n,"meth"),t=i(n),assert.equals(arguments.length,2)})(),assert.stub(e),assert.mock(t)},"browser options":{requiresSupportFor:{"ajax/browser":typeof XMLHttpRequest!="undefined"||typeof ActiveXObject!="undefined"},"yields server when faking xhr":function(){var e,t,n,r={meth:function(){}};sinon.config={injectIntoThis:!1,properties:["server","stub","mock"]},sinon.test(function(i,s,o){n=i,e=s(r,"meth"),t=o(r),assert.equals(arguments.length,3)})(),assert.fakeServer(n),assert.stub(e),assert.mock(t)},"uses serverWithClock when faking xhr":function(){var e;sinon.config={injectIntoThis:!1,properties:["server"],useFakeServer:sinon.fakeServerWithClock},sinon.test(function(t){e=t})(),assert.fakeServer(e),assert(sinon.fakeServerWithClock.isPrototypeOf(e))},"injects properties into object":function(){function t(){assert.equals(arguments.length,0),refute.defined(this.server),refute.defined(this.clock),refute.defined(this.spy),refute.defined(this.stub),refute.defined(this.mock),refute.defined(this.requests),assert.fakeServer(e.server),assert.clock(e.clock),assert.isFunction(e.spy),assert.isFunction(e.stub),assert.isFunction(e.mock),assert.isArray(e.requests)}var e={};sinon.config={injectIntoThis:!1,injectInto:e,properties:["server","clock","spy","stub","mock","requests"]},sinon.test(t).call({})},"injects server and clock when only enabling them":function(){function e(){assert.equals(arguments.length,0),assert.isFunction(this.spy),assert.isFunction(this.stub),assert.isFunction(this.mock),assert.fakeServer(this.server),assert.isArray(this.requests),assert.clock(this.clock),refute.defined(this.sandbox)}sinon.config={useFakeTimers:!0,useFakeServer:!0},sinon.test(e).call({})}},"yields clock when faking timers":function(){var e;sinon.config={injectIntoThis:!1,properties:["clock"]},sinon.test(function(t){e=t,assert.equals(arguments.length,1)})(),assert.clock(e)},"fakes specified timers":function(){var e;sinon.config={injectIntoThis:!1,properties:["clock"],useFakeTimers:["Date","setTimeout"]},sinon.test(function(t){e={clock:t,Date:Date,setTimeout:setTimeout,clearTimeout:clearTimeout,setImmediate:typeof setImmediate!="undefined"?setImmediate:undefined,clearImmediate:typeof clearImmediate!="undefined"?clearImmediate:undefined,setInterval:setInterval,clearInterval:clearInterval}})(),refute.same(e.Date,sinon.timers.Date),refute.same(e.setTimeout,sinon.timers.setTimeout),assert.same(e.clearTimeout,sinon.timers.clearTimeout),assert.same(e.setImmediate,sinon.timers.setImmediate),assert.same(e.clearImmediate,sinon.timers.clearImmediate),assert.same(e.setInterval,sinon.timers.setInterval),assert.same(e.clearInterval,sinon.timers.clearInterval)},"injects properties into test case":function(){function t(){assert.same(this,e),assert.equals(arguments.length,0),assert.clock(this.clock),refute.defined(this.spy),refute.defined(this.stub),refute.defined(this.mock)}var e={};sinon.config={properties:["clock"]},sinon.test(t).call(e)},"injects functions into test case by default":function(){function e(){assert.equals(arguments.length,0),assert.isFunction(this.spy),assert.isFunction(this.stub),assert.isFunction(this.mock),assert.isObject(this.clock)}sinon.test(e).call({})},"injects sandbox":function(){function e(){assert.equals(arguments.length,0),assert.isFunction(this.spy),assert.isObject(this.sandbox)}sinon.config={properties:["sandbox","spy"]},sinon.test(e).call({})},"remove injected properties afterwards":function(){var e={};sinon.test(function(){}).call(e),refute.defined(e.spy),refute.defined(e.stub),refute.defined(e.mock),refute.defined(e.sandbox),refute.defined(e.clock),refute.defined(e.server),refute.defined(e.requests)},"uses sinon.test to fake time":function(){sinon.config={useFakeTimers:!0};var e,t={test:sinon.test(function(){var t=this.spy();setTimeout(t,19),this.clock.tick(19),e=t.called})};t.test(),assert(e)}}});