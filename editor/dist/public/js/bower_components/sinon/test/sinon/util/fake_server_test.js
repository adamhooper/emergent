/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

buster.testCase("sinon.fakeServer",{tearDown:function(){this.server&&this.server.restore()},"provides restore method":function(){this.server=sinon.fakeServer.create(),assert.isFunction(this.server.restore)},"fakes XMLHttpRequest":sinon.test(function(){this.stub(sinon,"useFakeXMLHttpRequest").returns({restore:this.stub()}),this.server=sinon.fakeServer.create(),assert(sinon.useFakeXMLHttpRequest.called)}),"mirrors FakeXMLHttpRequest restore method":sinon.test(function(){this.server=sinon.fakeServer.create();var e=this.stub(sinon.FakeXMLHttpRequest,"restore");this.server.restore(),assert(e.called)}),requests:{setUp:function(){this.server=sinon.fakeServer.create()},tearDown:function(){this.server.restore()},"collects objects created with fake XHR":function(){var e=[new sinon.FakeXMLHttpRequest,new sinon.FakeXMLHttpRequest];assert.equals(this.server.requests,e)},"collects xhr objects through addRequest":function(){this.server.addRequest=sinon.spy();var e=new sinon.FakeXMLHttpRequest;assert(this.server.addRequest.calledWith(e))},"observes onSend on requests":function(){var e=[new sinon.FakeXMLHttpRequest,new sinon.FakeXMLHttpRequest];assert.isFunction(e[0].onSend),assert.isFunction(e[1].onSend)},"onSend should call handleRequest with request object":function(){var e=new sinon.FakeXMLHttpRequest;e.open("GET","/"),sinon.spy(this.server,"handleRequest"),e.send(),assert(this.server.handleRequest.called),assert(this.server.handleRequest.calledWith(e))}},handleRequest:{setUp:function(){this.server=sinon.fakeServer.create()},tearDown:function(){this.server.restore()},"responds to synchronous requests":function(){var e=new sinon.FakeXMLHttpRequest;e.open("GET","/",!1),sinon.spy(e,"respond"),e.send(),assert(e.respond.called)},"does not respond to async requests":function(){var e=new sinon.FakeXMLHttpRequest;e.open("GET","/",!0),sinon.spy(e,"respond"),e.send(),assert.isFalse(e.respond.called)}},respondWith:{setUp:function(){this.server=sinon.fakeServer.create(),this.getRootAsync=new sinon.FakeXMLHttpRequest,this.getRootAsync.open("GET","/",!0),this.getRootAsync.send(),sinon.spy(this.getRootAsync,"respond"),this.postRootAsync=new sinon.FakeXMLHttpRequest,this.postRootAsync.open("POST","/",!0),this.postRootAsync.send(),sinon.spy(this.postRootAsync,"respond"),this.getRootSync=new sinon.FakeXMLHttpRequest,this.getRootSync.open("GET","/",!1),this.getPathAsync=new sinon.FakeXMLHttpRequest,this.getPathAsync.open("GET","/path",!0),this.getPathAsync.send(),sinon.spy(this.getPathAsync,"respond"),this.postPathAsync=new sinon.FakeXMLHttpRequest,this.postPathAsync.open("POST","/path",!0),this.postPathAsync.send(),sinon.spy(this.postPathAsync,"respond")},tearDown:function(){this.server.restore()},"responds to queued async requests":function(){this.server.respondWith("Oh yeah! Duffman!"),this.server.respond(),assert(this.getRootAsync.respond.called),assert.equals(this.getRootAsync.respond.args[0],[200,{},"Oh yeah! Duffman!"])},"responds to all queued async requests":function(){this.server.respondWith("Oh yeah! Duffman!"),this.server.respond(),assert(this.getRootAsync.respond.called),assert(this.getPathAsync.respond.called)},"does not respond to requests queued after respond() (eg from callbacks)":function(){var e;this.getRootAsync.addEventListener("load",function(){e=new sinon.FakeXMLHttpRequest,e.open("GET","/",!0),e.send(),sinon.spy(e,"respond")}),this.server.respondWith("Oh yeah! Duffman!"),this.server.respond(),assert(this.getRootAsync.respond.called),assert(this.getPathAsync.respond.called),assert(!e.respond.called),this.server.respond(),assert(e.respond.called)},"responds with status, headers, and body":function(){var e={"Content-Type":"X-test"};this.server.respondWith([201,e,"Oh yeah!"]),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[201,e,"Oh yeah!"])},"handles responding with empty queue":function(){delete this.server.queue;var e=this.server;refute.exception(function(){e.respond()})},"responds to sync request with canned answers":function(){this.server.respondWith([210,{"X-Ops":"Yeah"},"Body, man"]),this.getRootSync.send(),assert.equals(this.getRootSync.status,210),assert.equals(this.getRootSync.getAllResponseHeaders(),"X-Ops: Yeah\r\n"),assert.equals(this.getRootSync.responseText,"Body, man")},"responds to sync request with 404 if no response is set":function(){this.getRootSync.send(),assert.equals(this.getRootSync.status,404),assert.equals(this.getRootSync.getAllResponseHeaders(),""),assert.equals(this.getRootSync.responseText,"")},"responds to async request with 404 if no response is set":function(){this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[404,{},""])},"responds to specific URL":function(){this.server.respondWith("/path","Duffman likes Duff beer"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[404,{},""]),assert.equals(this.getPathAsync.respond.args[0],[200,{},"Duffman likes Duff beer"])},"responds to URL matched by regexp":function(){this.server.respondWith(/^\/p.*/,"Regexp"),this.server.respond(),assert.equals(this.getPathAsync.respond.args[0],[200,{},"Regexp"])},"does not respond to URL not matched by regexp":function(){this.server.respondWith(/^\/p.*/,"No regexp match"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[404,{},""])},"responds to all URLs matched by regexp":function(){this.server.respondWith(/^\/.*/,"Match all URLs"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[200,{},"Match all URLs"]),assert.equals(this.getPathAsync.respond.args[0],[200,{},"Match all URLs"])},"responds to all requests when match URL is falsy":function(){this.server.respondWith("","Falsy URL"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[200,{},"Falsy URL"]),assert.equals(this.getPathAsync.respond.args[0],[200,{},"Falsy URL"])},"responds to all GET requests":function(){this.server.respondWith("GET","","All GETs"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[200,{},"All GETs"]),assert.equals(this.getPathAsync.respond.args[0],[200,{},"All GETs"]),assert.equals(this.postRootAsync.respond.args[0],[404,{},""]),assert.equals(this.postPathAsync.respond.args[0],[404,{},""])},"responds to all 'get' requests (case-insensitivity)":function(){this.server.respondWith("get","","All GETs"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[200,{},"All GETs"]),assert.equals(this.getPathAsync.respond.args[0],[200,{},"All GETs"]),assert.equals(this.postRootAsync.respond.args[0],[404,{},""]),assert.equals(this.postPathAsync.respond.args[0],[404,{},""])},"responds to all PUT requests":function(){this.server.respondWith("PUT","","All PUTs"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[404,{},""]),assert.equals(this.getPathAsync.respond.args[0],[404,{},""]),assert.equals(this.postRootAsync.respond.args[0],[404,{},""]),assert.equals(this.postPathAsync.respond.args[0],[404,{},""])},"responds to all POST requests":function(){this.server.respondWith("POST","","All POSTs"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[404,{},""]),assert.equals(this.getPathAsync.respond.args[0],[404,{},""]),assert.equals(this.postRootAsync.respond.args[0],[200,{},"All POSTs"]),assert.equals(this.postPathAsync.respond.args[0],[200,{},"All POSTs"])},"responds to all POST requests to /path":function(){this.server.respondWith("POST","/path","All POSTs"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[404,{},""]),assert.equals(this.getPathAsync.respond.args[0],[404,{},""]),assert.equals(this.postRootAsync.respond.args[0],[404,{},""]),assert.equals(this.postPathAsync.respond.args[0],[200,{},"All POSTs"])},"responds to all POST requests matching regexp":function(){this.server.respondWith("POST",/^\/path(\?.*)?/,"All POSTs"),this.server.respond(),assert.equals(this.getRootAsync.respond.args[0],[404,{},""]),assert.equals(this.getPathAsync.respond.args[0],[404,{},""]),assert.equals(this.postRootAsync.respond.args[0],[404,{},""]),assert.equals(this.postPathAsync.respond.args[0],[200,{},"All POSTs"])},"does not respond to aborted requests":function(){this.server.respondWith("/","That's my homepage!"),this.getRootAsync.aborted=!0,this.server.respond(),assert.isFalse(this.getRootAsync.respond.called)},"resets requests":function(){this.server.respondWith("/","That's my homepage!"),this.server.respond(),assert.equals(this.server.queue,[])},"notifies all requests when some throw":function(){this.getRootAsync.respond=function(){throw new Error("Oops!")},this.server.respondWith(""),this.server.respond(),assert.equals(this.getPathAsync.respond.args[0],[200,{},""]),assert.equals(this.postRootAsync.respond.args[0],[200,{},""]),assert.equals(this.postPathAsync.respond.args[0],[200,{},""])},"recognizes request with hostname":function(){this.server.respondWith("/",[200,{},"Yep"]);var e=new sinon.FakeXMLHttpRequest,t=window.location;e.open("GET",t.protocol+"//"+t.host+"/",!0),e.send(),sinon.spy(e,"respond"),this.server.respond(),assert.equals(e.respond.args[0],[200,{},"Yep"])},"throws understandable error if response is not a string":function(){var e;try{this.server.respondWith("/",{})}catch(t){e=t}assert.isObject(e),assert.equals(e.message,"Fake server response body should be string, but was object")},"throws understandable error if response in array is not a string":function(){var e;try{this.server.respondWith("/",[200,{}])}catch(t){e=t}assert.isObject(e),assert.equals(e.message,"Fake server response body should be string, but was undefined")},"is able to pass the same args to respond directly":function(){this.server.respond("Oh yeah! Duffman!"),assert.equals(this.getRootAsync.respond.args[0],[200,{},"Oh yeah! Duffman!"]),assert.equals(this.getPathAsync.respond.args[0],[200,{},"Oh yeah! Duffman!"]),assert.equals(this.postRootAsync.respond.args[0],[200,{},"Oh yeah! Duffman!"]),assert.equals(this.postPathAsync.respond.args[0],[200,{},"Oh yeah! Duffman!"])},"responds to most recently defined match":function(){this.server.respondWith("POST","","All POSTs"),this.server.respondWith("POST","/path","Particular POST"),this.server.respond(),assert.equals(this.postRootAsync.respond.args[0],[200,{},"All POSTs"]),assert.equals(this.postPathAsync.respond.args[0],[200,{},"Particular POST"])}},respondWithFunctionHandler:{setUp:function(){this.server=sinon.fakeServer.create()},tearDown:function(){this.server.restore()},"yields response to request function handler":function(){var e=sinon.spy();this.server.respondWith("/hello",e);var t=new sinon.FakeXMLHttpRequest;t.open("GET","/hello"),t.send(),this.server.respond(),assert(e.calledOnce),assert(e.calledWith(t))},"responds to request from function handler":function(){this.server.respondWith("/hello",function(e){e.respond(200,{"Content-Type":"application/json"},'{"id":42}')});var e=new sinon.FakeXMLHttpRequest;e.open("GET","/hello"),e.send(),this.server.respond(),assert.equals(e.status,200),assert.equals(e.responseHeaders,{"Content-Type":"application/json"}),assert.equals(e.responseText,'{"id":42}')},"yields response to request function handler when method matches":function(){var e=sinon.spy();this.server.respondWith("GET","/hello",e);var t=new sinon.FakeXMLHttpRequest;t.open("GET","/hello"),t.send(),this.server.respond(),assert(e.calledOnce)},"yields response to request function handler when url contains RegExp characters":function(){var e=sinon.spy();this.server.respondWith("GET","/hello?world",e);var t=new sinon.FakeXMLHttpRequest;t.open("GET","/hello?world"),t.send(),this.server.respond(),assert(e.calledOnce)},"does not yield response to request function handler when method does not match":function(){var e=sinon.spy();this.server.respondWith("GET","/hello",e);var t=new sinon.FakeXMLHttpRequest;t.open("POST","/hello"),t.send(),this.server.respond(),assert(!e.called)},"yields response to request function handler when regexp url matches":function(){var e=sinon.spy();this.server.respondWith("GET",/\/.*/,e);var t=new sinon.FakeXMLHttpRequest;t.open("GET","/hello"),t.send(),this.server.respond(),assert(e.calledOnce)},"does not yield response to request function handler when regexp url does not match":function(){var e=sinon.spy();this.server.respondWith("GET",/\/a.*/,e);var t=new sinon.FakeXMLHttpRequest;t.open("GET","/hello"),t.send(),this.server.respond(),assert(!e.called)},"adds function handler without method or url filter":function(){this.server.respondWith(function(e){e.respond(200,{"Content-Type":"application/json"},'{"id":42}')});var e=new sinon.FakeXMLHttpRequest;e.open("GET","/whatever"),e.send(),this.server.respond(),assert.equals(e.status,200),assert.equals(e.responseHeaders,{"Content-Type":"application/json"}),assert.equals(e.responseText,'{"id":42}')},"does not process request further if processed by function":function(){var e=sinon.spy();this.server.respondWith("GET","/aloha",[200,{},"Oh hi"]),this.server.respondWith("GET",/\/a.*/,e);var t=new sinon.FakeXMLHttpRequest;t.respond=sinon.spy(),t.open("GET","/aloha"),t.send(),this.server.respond(),assert(e.called),assert(t.respond.calledOnce)},"yields URL capture groups to response handler":function(){var e=sinon.spy();this.server.respondWith("GET",/\/people\/(\d+)/,e);var t=new sinon.FakeXMLHttpRequest;t.respond=sinon.spy(),t.open("GET","/people/3"),t.send(),this.server.respond(),assert(e.called),assert.equals(e.args[0],[t,3])}},respondFakeHTTPVerb:{setUp:function(){this.server=sinon.fakeServer.create(),this.request=new sinon.FakeXMLHttpRequest,this.request.open("post","/path",!0),this.request.send("_method=delete"),sinon.spy(this.request,"respond")},tearDown:function(){this.server.restore()},"does not respond to DELETE request with _method parameter":function(){this.server.respondWith("DELETE","",""),this.server.respond(),assert.equals(this.request.respond.args[0],[404,{},""])},"responds to 'fake' DELETE request":function(){this.server.fakeHTTPMethods=!0,this.server.respondWith("DELETE","","OK"),this.server.respond(),assert.equals(this.request.respond.args[0],[200,{},"OK"])},"does not respond to POST when faking DELETE":function(){this.server.fakeHTTPMethods=!0,this.server.respondWith("POST","","OK"),this.server.respond(),assert.equals(this.request.respond.args[0],[404,{},""])},"does not fake method when not POSTing":function(){this.server.fakeHTTPMethods=!0,this.server.respondWith("DELETE","","OK");var e=new sinon.FakeXMLHttpRequest;e.open("GET","/"),e.send(),e.respond=sinon.spy(),this.server.respond(),assert.equals(e.respond.args[0],[404,{},""])},"customizes HTTP method extraction":function(){this.server.getHTTPMethod=function(e){return"PUT"},this.server.respondWith("PUT","","OK"),this.server.respond(),assert.equals(this.request.respond.args[0],[200,{},"OK"])},"does not fail when getting the HTTP method from a request with no body":function(){var e=this.server;e.fakeHTTPMethods=!0,assert.equals(e.getHTTPMethod({method:"POST"}),"POST")}},autoResponse:{setUp:function(){this.get=function(t){var n=new sinon.FakeXMLHttpRequest;return sinon.spy(n,"respond"),n.open("get",t,!0),n.send(),n},this.server=sinon.fakeServer.create(),this.clock=sinon.useFakeTimers()},tearDown:function(){this.server.restore(),this.clock.restore()},"responds async automatically after 10ms":function(){this.server.autoRespond=!0;var e=this.get("/path");this.clock.tick(10),assert.isTrue(e.respond.calledOnce)},"normal server does not respond automatically":function(){var e=this.get("/path");this.clock.tick(100),assert.isTrue(!e.respond.called)},"auto-responds only once":function(){this.server.autoRespond=!0;var e=[this.get("/path")];this.clock.tick(5),e.push(this.get("/other")),this.clock.tick(5),assert.isTrue(e[0].respond.calledOnce),assert.isTrue(e[1].respond.calledOnce)},"auto-responds after having already responded":function(){this.server.autoRespond=!0;var e=[this.get("/path")];this.clock.tick(10),e.push(this.get("/other")),this.clock.tick(10),assert.isTrue(e[0].respond.calledOnce),assert.isTrue(e[1].respond.calledOnce)},"sets auto-respond timeout to 50ms":function(){this.server.autoRespond=!0,this.server.autoRespondAfter=50;var e=this.get("/path");this.clock.tick(49),assert.isFalse(e.respond.called),this.clock.tick(1),assert.isTrue(e.respond.calledOnce)},"auto-responds if two successive requests are made with a single XHR":function(){this.server.autoRespond=!0;var e=this.get("/path");this.clock.tick(10),assert.isTrue(e.respond.calledOnce),e.open("get","/other",!0),e.send(),this.clock.tick(10),assert.isTrue(e.respond.calledTwice)},"auto-responds if timeout elapses between creating a XHR object and sending a request with it":function(){this.server.autoRespond=!0;var e=new sinon.FakeXMLHttpRequest;sinon.spy(e,"respond"),this.clock.tick(100),e.open("get","/path",!0),e.send(),this.clock.tick(10),assert.isTrue(e.respond.calledOnce)}}});