/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @author Maximilian Antoni (mail@maxantoni.de)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 * Copyright (c) 2013 Maximilian Antoni
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("../runner"),sinon=require("../../lib/sinon");(function(){function e(e){return{setUp:n,"returns true if all args match":function(){var t=this.args;assert(this.call[e](t[0],t[1],t[2]))},"returns true if first args match":function(){var t=this.args;assert(this.call[e](t[0],t[1]))},"returns true if first arg match":function(){var t=this.args;assert(this.call[e](t[0]))},"returns true for no args":function(){assert(this.call[e]())},"returns false for too many args":function(){var t=this.args;assert.isFalse(this.call[e](t[0],t[1],t[2],t[3],{}))},"returns false for wrong arg":function(){var t=this.args;assert.isFalse(this.call[e](t[0],t[2]))}}}function t(e){return{setUp:n,"returns false if all args match":function(){var t=this.args;assert.isFalse(this.call[e](t[0],t[1],t[2]))},"returns false if first args match":function(){var t=this.args;assert.isFalse(this.call[e](t[0],t[1]))},"returns false if first arg match":function(){var t=this.args;assert.isFalse(this.call[e](t[0]))},"returns false for no args":function(){assert.isFalse(this.call[e]())},"returns true for too many args":function(){var t=this.args;assert(this.call[e](t[0],t[1],t[2],t[3],{}))},"returns true for wrong arg":function(){var t=this.args;assert(this.call[e](t[0],t[2]))}}}function n(){this.thisValue={},this.args=[{},[],new Error,3],this.returnValue=function(){},this.call=sinon.spyCall(function(){},this.thisValue,this.args,this.returnValue,null,0)}function r(){this.args=[],this.proxy=sinon.spy(),this.call=sinon.spyCall(this.proxy,{},this.args,null,null,0)}buster.testCase("sinon.spy.call",{callObject:{setUp:n,"gets call object":function(){var e=sinon.spy.create();e();var t=e.getCall(0);assert.isFunction(t.calledOn),assert.isFunction(t.calledWith),assert.isFunction(t.returned)},"stores given call id":function(){var e=sinon.spyCall(function(){},{},[],null,null,42);assert.same(e.callId,42)},"throws if callId is undefined":function(){assert.exception(function(){sinon.spyCall.create(function(){},{},[])})},"records ascending call id's":function(){var e=sinon.spy();e(),assert(this.call.callId<e.getCall(0).callId)},"exposes thisValue property":function(){var e=sinon.spy(),t={};e.call(t),assert.same(e.getCall(0).thisValue,t)}},callCalledOn:{setUp:n,"calledOn should return true":function(){assert(this.call.calledOn(this.thisValue))},"calledOn should return false":function(){assert.isFalse(this.call.calledOn({}))}},"call.calledWith":e("calledWith"),"call.calledWithMatch":e("calledWithMatch"),"call.notCalledWith":t("notCalledWith"),"call.notCalledWithMatch":t("notCalledWithMatch"),"call.calledWithExactly":{setUp:n,"returns true when all args match":function(){var e=this.args;assert(this.call.calledWithExactly(e[0],e[1],e[2],e[3]))},"returns false for too many args":function(){var e=this.args;assert.isFalse(this.call.calledWithExactly(e[0],e[1],e[2],e[3],{}))},"returns false for too few args":function(){var e=this.args;assert.isFalse(this.call.calledWithExactly(e[0],e[1]))},"returns false for unmatching args":function(){var e=this.args;assert.isFalse(this.call.calledWithExactly(e[0],e[1],e[1]))},"returns true for no arguments":function(){var e=sinon.spyCall(function(){},{},[],null,null,0);assert(e.calledWithExactly())},"returns false when called with no args but matching one":function(){var e=sinon.spyCall(function(){},{},[],null,null,0);assert.isFalse(e.calledWithExactly({}))}},"call.callArg":{setUp:r,"calls argument at specified index":function(){var e=sinon.spy();this.args.push(1,2,e),this.call.callArg(2),assert(e.called)},"throws if argument at specified index is not callable":function(){this.args.push(1);var e=this.call;assert.exception(function(){e.callArg(0)},"TypeError")},"throws if no index is specified":function(){var e=this.call;assert.exception(function(){e.callArg()},"TypeError")},"throws if index is not number":function(){var e=this.call;assert.exception(function(){e.callArg({})},"TypeError")}},"call.callArgOn":{setUp:r,"calls argument at specified index":function(){var e=sinon.spy(),t={name1:"value1",name2:"value2"};this.args.push(1,2,e),this.call.callArgOn(2,t),assert(e.called),assert(e.calledOn(t))},"throws if argument at specified index is not callable":function(){var e={name1:"value1",name2:"value2"};this.args.push(1);var t=this.call;assert.exception(function(){t.callArgOn(0,e)},"TypeError")},"throws if index is not number":function(){var e={name1:"value1",name2:"value2"},t=this.call;assert.exception(function(){t.callArgOn({},e)},"TypeError")}},"call.callArgWith":{setUp:r,"calls argument at specified index with provided args":function(){var e={},t=sinon.spy();this.args.push(1,t),this.call.callArgWith(1,e),assert(t.calledWith(e))},"calls callback without args":function(){var e=sinon.spy();this.args.push(1,e),this.call.callArgWith(1),assert(e.calledWith())},"calls callback wit multiple args":function(){var e={},t=[],n=sinon.spy();this.args.push(1,2,n),this.call.callArgWith(2,e,t),assert(n.calledWith(e,t))},"throws if no index is specified":function(){var e=this.call;assert.exception(function(){e.callArgWith()},"TypeError")},"throws if index is not number":function(){var e=this.call;assert.exception(function(){e.callArgWith({})},"TypeError")}},"call.callArgOnWith":{setUp:r,"calls argument at specified index with provided args":function(){var e={},t={name1:"value1",name2:"value2"},n=sinon.spy();this.args.push(1,n),this.call.callArgOnWith(1,t,e),assert(n.calledWith(e)),assert(n.calledOn(t))},"calls callback without args":function(){var e=sinon.spy(),t={name1:"value1",name2:"value2"};this.args.push(1,e),this.call.callArgOnWith(1,t),assert(e.calledWith()),assert(e.calledOn(t))},"calls callback with multiple args":function(){var e={},t=[],n={name1:"value1",name2:"value2"},r=sinon.spy();this.args.push(1,2,r),this.call.callArgOnWith(2,n,e,t),assert(r.calledWith(e,t)),assert(r.calledOn(n))},"throws if index is not number":function(){var e={name1:"value1",name2:"value2"},t=this.call;assert.exception(function(){t.callArgOnWith({},e)},"TypeError")}},"call.yieldTest":{setUp:r,"invokes only argument as callback":function(){var e=sinon.spy();this.args.push(e),this.call.yield(),assert(e.calledOnce),assert.equals(e.args[0].length,0)},"throws understandable error if no callback is passed":function(){var e=this.call;try{throw e.yield(),new Error}catch(t){assert.equals(t.message,"spy cannot yield since no callback was passed.")}},"includes stub name and actual arguments in error":function(){this.proxy.displayName="somethingAwesome",this.args.push(23,42);var e=this.call;try{throw e.yield(),new Error}catch(t){assert.equals(t.message,"somethingAwesome cannot yield since no callback was passed. Received [23, 42]")}},"invokes last argument as callback":function(){var e=sinon.spy();this.args.push(24,{},e),this.call.yield(),assert(e.calledOnce),assert.equals(e.args[0].length,0)},"invokes first of two callbacks":function(){var e=sinon.spy(),t=sinon.spy();this.args.push(24,{},e,t),this.call.yield(),assert(e.calledOnce),assert.isFalse(t.called)},"invokes callback with arguments":function(){var e={id:42},t=sinon.spy();this.args.push(t),this.call.yield(e,"Crazy"),assert(t.calledWith(e,"Crazy"))},"throws if callback throws":function(){this.args.push(function(){throw new Error("d'oh!")});var e=this.call;assert.exception(function(){e.yield()})}},"call.invokeCallback":{"is alias for yield":function(){var e=sinon.spyCall(function(){},{},[],null,null,0);assert.same(e.yield,e.invokeCallback)}},"call.yieldOnTest":{setUp:r,"invokes only argument as callback":function(){var e=sinon.spy(),t={name1:"value1",name2:"value2"};this.args.push(e),this.call.yieldOn(t),assert(e.calledOnce),assert(e.calledOn(t)),assert.equals(e.args[0].length,0)},"throws understandable error if no callback is passed":function(){var e=this.call,t={name1:"value1",name2:"value2"};try{throw e.yieldOn(t),new Error}catch(n){assert.equals(n.message,"spy cannot yield since no callback was passed.")}},"includes stub name and actual arguments in error":function(){this.proxy.displayName="somethingAwesome",this.args.push(23,42);var e=this.call,t={name1:"value1",name2:"value2"};try{throw e.yieldOn(t),new Error}catch(n){assert.equals(n.message,"somethingAwesome cannot yield since no callback was passed. Received [23, 42]")}},"invokes last argument as callback":function(){var e=sinon.spy(),t={name1:"value1",name2:"value2"};this.args.push(24,{},e),this.call.yieldOn(t),assert(e.calledOnce),assert.equals(e.args[0].length,0),assert(e.calledOn(t))},"invokes first of two callbacks":function(){var e=sinon.spy(),t=sinon.spy(),n={name1:"value1",name2:"value2"};this.args.push(24,{},e,t),this.call.yieldOn(n),assert(e.calledOnce),assert(e.calledOn(n)),assert.isFalse(t.called)},"invokes callback with arguments":function(){var e={id:42},t=sinon.spy(),n={name1:"value1",name2:"value2"};this.args.push(t),this.call.yieldOn(n,e,"Crazy"),assert(t.calledWith(e,"Crazy")),assert(t.calledOn(n))},"throws if callback throws":function(){this.args.push(function(){throw new Error("d'oh!")});var e=this.call,t={name1:"value1",name2:"value2"};assert.exception(function(){e.yieldOn(t)})}},"call.yieldTo":{setUp:r,"invokes only argument as callback":function(){var e=sinon.spy();this.args.push({success:e}),this.call.yieldTo("success"),assert(e.calledOnce),assert.equals(e.args[0].length,0)},"throws understandable error if no callback is passed":function(){var e=this.call;try{throw e.yieldTo("success"),new Error}catch(t){assert.equals(t.message,"spy cannot yield to 'success' since no callback was passed.")}},"includes stub name and actual arguments in error":function(){this.proxy.displayName="somethingAwesome",this.args.push(23,42);var e=this.call;try{throw e.yieldTo("success"),new Error}catch(t){assert.equals(t.message,"somethingAwesome cannot yield to 'success' since no callback was passed. Received [23, 42]")}},"invokes property on last argument as callback":function(){var e=sinon.spy();this.args.push(24,{},{success:e}),this.call.yieldTo("success"),assert(e.calledOnce),assert.equals(e.args[0].length,0)},"invokes first of two possible callbacks":function(){var e=sinon.spy(),t=sinon.spy();this.args.push(24,{},{error:e},{error:t}),this.call.yieldTo("error"),assert(e.calledOnce),assert.isFalse(t.called)},"invokes callback with arguments":function(){var e={id:42},t=sinon.spy();this.args.push({success:t}),this.call.yieldTo("success",e,"Crazy"),assert(t.calledWith(e,"Crazy"))},"throws if callback throws":function(){this.args.push({success:function(){throw new Error("d'oh!")}});var e=this.call;assert.exception(function(){e.yieldTo("success")})}},"call.yieldToOn":{setUp:r,"invokes only argument as callback":function(){var e=sinon.spy(),t={name1:"value1",name2:"value2"};this.args.push({success:e}),this.call.yieldToOn("success",t),assert(e.calledOnce),assert.equals(e.args[0].length,0),assert(e.calledOn(t))},"throws understandable error if no callback is passed":function(){var e=this.call,t={name1:"value1",name2:"value2"};try{throw e.yieldToOn("success",t),new Error}catch(n){assert.equals(n.message,"spy cannot yield to 'success' since no callback was passed.")}},"includes stub name and actual arguments in error":function(){this.proxy.displayName="somethingAwesome",this.args.push(23,42);var e=this.call,t={name1:"value1",name2:"value2"};try{throw e.yieldToOn("success",t),new Error}catch(n){assert.equals(n.message,"somethingAwesome cannot yield to 'success' since no callback was passed. Received [23, 42]")}},"invokes property on last argument as callback":function(){var e=sinon.spy(),t={name1:"value1",name2:"value2"};this.args.push(24,{},{success:e}),this.call.yieldToOn("success",t),assert(e.calledOnce),assert(e.calledOn(t)),assert.equals(e.args[0].length,0)},"invokes first of two possible callbacks":function(){var e=sinon.spy(),t=sinon.spy(),n={name1:"value1",name2:"value2"};this.args.push(24,{},{error:e},{error:t}),this.call.yieldToOn("error",n),assert(e.calledOnce),assert(e.calledOn(n)),assert.isFalse(t.called)},"invokes callback with arguments":function(){var e={id:42},t=sinon.spy(),n={name1:"value1",name2:"value2"};this.args.push({success:t}),this.call.yieldToOn("success",n,e,"Crazy"),assert(t.calledWith(e,"Crazy")),assert(t.calledOn(n))},"throws if callback throws":function(){this.args.push({success:function(){throw new Error("d'oh!")}});var e=this.call,t={name1:"value1",name2:"value2"};assert.exception(function(){e.yieldToOn("success",t)})}},"call.toString":{setUp:function(){this.format=sinon.format},tearDown:function(){sinon.format=this.format},"includes spy name":function(){var e={doIt:sinon.spy()};e.doIt(),assert.equals(e.doIt.getCall(0).toString(),"doIt()")},"includes single argument":function(){var e={doIt:sinon.spy()};e.doIt(42),assert.equals(e.doIt.getCall(0).toString(),"doIt(42)")},"includes all arguments":function(){var e={doIt:sinon.spy()};e.doIt(42,"Hey"),assert.equals(e.doIt.getCall(0).toString(),"doIt(42, Hey)")},"includes explicit return value":function(){var e={doIt:sinon.stub().returns(42)};e.doIt(42,"Hey"),assert.equals(e.doIt.getCall(0).toString(),"doIt(42, Hey) => 42")},"includes empty string return value":function(){var e={doIt:sinon.stub().returns("")};e.doIt(42,"Hey"),assert.equals(e.doIt.getCall(0).toString(),"doIt(42, Hey) => ")},"includes exception":function(){var e={doIt:sinon.stub().throws("TypeError")};try{e.doIt()}catch(t){}assert.equals(e.doIt.getCall(0).toString(),"doIt() !TypeError")},"includes exception message if any":function(){var e={doIt:sinon.stub().throws("TypeError","Oh noes!")};try{e.doIt()}catch(t){}assert.equals(e.doIt.getCall(0).toString(),"doIt() !TypeError(Oh noes!)")},"formats arguments with sinon.format":function(){sinon.format=sinon.stub().returns("Forty-two");var e={doIt:sinon.spy()};e.doIt(42),assert.equals(e.doIt.getCall(0).toString(),"doIt(Forty-two)"),assert(sinon.format.calledWith(42))},"formats return value with sinon.format":function(){sinon.format=sinon.stub().returns("Forty-two");var e={doIt:sinon.stub().returns(42)};e.doIt(),assert.equals(e.doIt.getCall(0).toString(),"doIt() => Forty-two"),assert(sinon.format.calledWith(42))}},constructor:{setUp:function(){this.CustomConstructor=function(){},this.customPrototype=this.CustomConstructor.prototype,sinon.spy(this,"CustomConstructor")},"creates original object":function(){var e=new this.CustomConstructor;assert(this.customPrototype.isPrototypeOf(e))},"does not interfere with instanceof":function(){var e=new this.CustomConstructor;assert(e instanceof this.CustomConstructor)},"records usage":function(){var e=new this.CustomConstructor;assert(this.CustomConstructor.called)}},"function":{"throws if spying on non-existent property":function(){var e={};assert.exception(function(){sinon.spy(e,"ouch")}),refute.defined(e.ouch)},"throws if spying on non-existent object":function(){assert.exception(function(){sinon.spy(undefined,"ouch")})},"haves toString method":function(){var e={meth:function(){}};sinon.spy(e,"meth"),assert.equals(e.meth.toString(),"meth")},"toString should say 'spy' when unable to infer name":function(){var e=sinon.spy();assert.equals(e.toString(),"spy")},"toString should report name of spied function":function(){function e(){}var t=sinon.spy(e);assert.equals(t.toString(),"myTestFunc")},"toString should prefer displayName property if available":function(){function e(){}e.displayName="My custom method";var t=sinon.spy(e);assert.equals(t.toString(),"My custom method")},"toString should prefer property name if possible":function(){var e={};e.meth=sinon.spy(),e.meth(),assert.equals(e.meth.toString(),"meth")}},reset:function(){function e(e){assert(!e.called),assert(!e.calledOnce),assert.equals(e.args.length,0),assert.equals(e.returnValues.length,0),assert.equals(e.exceptions.length,0),assert.equals(e.thisValues.length,0),assert.isNull(e.firstCall),assert.isNull(e.secondCall),assert.isNull(e.thirdCall),assert.isNull(e.lastCall)}return{"resets spy state":function(){var t=sinon.spy();t(),t.reset(),e(t)},"resets call order state":function(){var e=[sinon.spy(),sinon.spy()];e[0](),e[1](),e[0].reset(),assert(!e[0].calledBefore(e[1]))},"resets fakes returned by withArgs":function(){var t=sinon.spy(),n=t.withArgs("a"),r=t.withArgs("b");t("a"),t("b"),t("c");var i=t.withArgs("c");t.reset(),e(n),e(r),e(i)}}}(),withArgs:{"defines withArgs method":function(){var e=sinon.spy();assert.isFunction(e.withArgs)},"records single call":function(){var e=sinon.spy().withArgs(1);e(1),assert.equals(e.callCount,1)},"records non-matching call on original spy":function(){var e=sinon.spy(),t=e.withArgs(1);e(1),e(2),assert.equals(e.callCount,2),assert.equals(t.callCount,1)},"records non-matching call with several arguments separately":function(){var e=sinon.spy(),t=e.withArgs(1,"str",{});e(1),e(1,"str",{}),assert.equals(e.callCount,2),assert.equals(t.callCount,1)},"records for partial argument match":function(){var e=sinon.spy(),t=e.withArgs(1,"str",{});e(1),e(1,"str",{}),e(1,"str",{},[]),assert.equals(e.callCount,3),assert.equals(t.callCount,2)},"records filtered spy when original throws":function(){var e=sinon.spy(function(){throw new Error("Oops")}),t=e.withArgs({},[]);assert.exception(function(){e(1)}),assert.exception(function(){e({},[])}),assert.equals(e.callCount,2),assert.equals(t.callCount,1)},"returns existing override for arguments":function(){var e=sinon.spy(),t=e.withArgs({},[]),n=e.withArgs({},[]);e(),e({},[]),e({},[],2),assert.same(n,t),refute.same(n,e),assert.equals(e.callCount,3),assert.equals(e.withArgs({},[]).callCount,2)},"chains withArgs calls on original spy":function(){var e=sinon.spy(),t=e.withArgs({},[]).withArgs(3);e(),e({},[]),e(3),assert.equals(e.callCount,3),assert.equals(t.callCount,1),assert.equals(e.withArgs({},[]).callCount,1)},"initializes filtered spy with callCount":function(){var e=sinon.spy();e("a"),e("b"),e("b"),e("c"),e("c"),e("c");var t=e.withArgs("a"),n=e.withArgs("b"),r=e.withArgs("c");assert.equals(t.callCount,1),assert.equals(n.callCount,2),assert.equals(r.callCount,3),assert(t.called),assert(n.called),assert(r.called),assert(t.calledOnce),assert(n.calledTwice),assert(r.calledThrice)},"initializes filtered spy with first, second, third and last call":function(){var e=sinon.spy();e("a",1),e("b",2),e("b",3),e("b",4);var t=e.withArgs("a"),n=e.withArgs("b");assert(t.firstCall.calledWithExactly("a",1)),assert(t.lastCall.calledWithExactly("a",1)),assert(n.firstCall.calledWithExactly("b",2)),assert(n.secondCall.calledWithExactly("b",3)),assert(n.thirdCall.calledWithExactly("b",4)),assert(n.lastCall.calledWithExactly("b",4))},"initializes filtered spy with arguments":function(){var e=sinon.spy();e("a"),e("b"),e("b","c","d");var t=e.withArgs("a"),n=e.withArgs("b");assert(t.getCall(0).calledWithExactly("a")),assert(n.getCall(0).calledWithExactly("b")),assert(n.getCall(1).calledWithExactly("b","c","d"))},"initializes filtered spy with thisValues":function(){var e=sinon.spy(),t={},n={},r={};e.call(t,"a"),e.call(n,"b"),e.call(r,"b");var i=e.withArgs("a"),s=e.withArgs("b");assert(i.getCall(0).calledOn(t)),assert(s.getCall(0).calledOn(n)),assert(s.getCall(1).calledOn(r))},"initializes filtered spy with return values":function(){var e=sinon.spy(function(e){return e});e("a"),e("b"),e("b");var t=e.withArgs("a"),n=e.withArgs("b");assert(t.getCall(0).returned("a")),assert(n.getCall(0).returned("b")),assert(n.getCall(1).returned("b"))},"initializes filtered spy with call order":function(){var e=sinon.spy();e("a"),e("b"),e("b");var t=e.withArgs("a"),n=e.withArgs("b");assert(n.getCall(0).calledAfter(t.getCall(0))),assert(n.getCall(1).calledAfter(t.getCall(0)))},"initializes filtered spy with exceptions":function(){var e=sinon.spy(function(e,t){var n=new Error;throw n.name=t,n});try{e("a","1")}catch(t){}try{e("b","2")}catch(t){}try{e("b","3")}catch(t){}var n=e.withArgs("a"),r=e.withArgs("b");assert(n.getCall(0).threw("1")),assert(r.getCall(0).threw("2")),assert(r.getCall(1).threw("3"))}},printf:{name:{named:function(){var e=sinon.spy(function(){});assert.equals(e.printf("%n"),"cool")},anon:function(){var e=sinon.spy(function(){});assert.equals(e.printf("%n"),"spy");var t=sinon.spy();assert.equals(t.printf("%n"),"spy")}},count:function(){function t(){try{e()}catch(t){}}var e=sinon.spy(sinon.stub().throws());t(),assert.equals(e.printf("%c"),"once"),t(),assert.equals(e.printf("%c"),"twice"),t(),assert.equals(e.printf("%c"),"thrice"),t(),assert.equals(e.printf("%c"),"4 times")},calls:{oneLine:function(){function e(e,t){var n=sinon.spy();n(e),assert.equals(n.printf("%C"),"\n    "+t)}e(!0,"spy(true)"),e(!1,"spy(false)"),e(undefined,"spy(undefined)"),e(1,"spy(1)"),e(0,"spy(0)"),e(-1,"spy(-1)"),e(-1.1,"spy(-1.1)"),e(Infinity,"spy(Infinity)"),e(["a"],'spy(["a"])'),e({a:"a"},'spy({ a: "a" })')},multiline:function(){var e="spy\ntest",t=sinon.spy();t(e),t(e),t(e),assert.equals(t.printf("%C"),"\n    spy("+e+")"+"\n\n    spy("+e+")"+"\n\n    spy("+e+")"),t.reset(),t("test"),t("spy\ntest"),t("spy\ntest"),assert.equals(t.printf("%C"),"\n    spy(test)\n    spy("+e+")"+"\n\n    spy("+e+")")}},thisValues:function(){var e=sinon.spy();e(),assert.equals(e.printf("%t"),"undefined"),e.reset(),e.call(!0),assert.equals(e.printf("%t"),"true")}}})})();