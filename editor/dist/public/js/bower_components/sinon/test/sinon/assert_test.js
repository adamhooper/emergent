/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("../runner"),sinon=require("../../lib/sinon");buster.testCase("sinon.assert",{setUp:function(){this.global=typeof window!="undefined"?window:global,this.setUpStubs=function(){this.stub=sinon.stub.create(),sinon.stub(sinon.assert,"fail").throws(),sinon.stub(sinon.assert,"pass")},this.tearDownStubs=function(){sinon.assert.fail.restore(),sinon.assert.pass.restore()}},"is object":function(){assert.isObject(sinon.assert)},fail:{setUp:function(){this.exceptionName=sinon.assert.failException},tearDown:function(){sinon.assert.failException=this.exceptionName},"throws exception":function(){var e=!1,t;try{sinon.assert.fail("Some message"),e=!0}catch(n){t=n}assert.isFalse(e),assert.equals(t.name,"AssertError")},"throws configured exception type":function(){sinon.assert.failException="RetardError",assert.exception(function(){sinon.assert.fail("Some message")},"RetardError")}},match:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when arguments to not match":function(){assert.exception(function(){sinon.assert.match("foo","bar")}),assert(sinon.assert.fail.calledOnce)},"passes when argumens match":function(){sinon.assert.match("foo","foo"),assert(sinon.assert.pass.calledOnce)}},called:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method does not exist":function(){assert.exception(function(){sinon.assert.called()}),assert(sinon.assert.fail.called)},"fails when method is not stub":function(){assert.exception(function(){sinon.assert.called(function(){})}),assert(sinon.assert.fail.called)},"fails when method was not called":function(){var e=this.stub;assert.exception(function(){sinon.assert.called(e)}),assert(sinon.assert.fail.called)},"does not fail when method was called":function(){var e=this.stub;e(),refute.exception(function(){sinon.assert.called(e)}),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){var e=this.stub;e(),refute.exception(function(){sinon.assert.called(e)}),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("called"))}},notCalled:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method does not exist":function(){assert.exception(function(){sinon.assert.notCalled()}),assert(sinon.assert.fail.called)},"fails when method is not stub":function(){assert.exception(function(){sinon.assert.notCalled(function(){})}),assert(sinon.assert.fail.called)},"fails when method was called":function(){var e=this.stub;e(),assert.exception(function(){sinon.assert.notCalled(e)}),assert(sinon.assert.fail.called)},"passes when method was not called":function(){var e=this.stub;refute.exception(function(){sinon.assert.notCalled(e)}),assert.isFalse(sinon.assert.fail.called)},"should call pass callback":function(){var e=this.stub;sinon.assert.notCalled(e),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("notCalled"))}},calledOnce:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method does not exist":function(){assert.exception(function(){sinon.assert.calledOnce()}),assert(sinon.assert.fail.called)},"fails when method is not stub":function(){assert.exception(function(){sinon.assert.calledOnce(function(){})}),assert(sinon.assert.fail.called)},"fails when method was not called":function(){var e=this.stub;assert.exception(function(){sinon.assert.calledOnce(e)}),assert(sinon.assert.fail.called)},"passes when method was called":function(){var e=this.stub;e(),refute.exception(function(){sinon.assert.calledOnce(e)}),assert.isFalse(sinon.assert.fail.called)},"fails when method was called more than once":function(){var e=this.stub;e(),e(),assert.exception(function(){sinon.assert.calledOnce(e)}),assert(sinon.assert.fail.called)},"calls pass callback":function(){var e=this.stub;e(),sinon.assert.calledOnce(e),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("calledOnce"))}},calledTwice:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails if called once":function(){var e=this.stub;this.stub(),assert.exception(function(){sinon.assert.calledTwice(e)})},"passes if called twice":function(){var e=this.stub;this.stub(),this.stub(),refute.exception(function(){sinon.assert.calledTwice(e)})},"calls pass callback":function(){var e=this.stub;e(),e(),sinon.assert.calledTwice(e),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("calledTwice"))}},calledThrice:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails if called once":function(){var e=this.stub;this.stub(),assert.exception(function(){sinon.assert.calledThrice(e)})},"passes if called thrice":function(){var e=this.stub;this.stub(),this.stub(),this.stub(),refute.exception(function(){sinon.assert.calledThrice(e)})},"calls pass callback":function(){var e=this.stub;e(),e(),e(),sinon.assert.calledThrice(e),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("calledThrice"))}},callOrder:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"passes when calls where done in right order":function(){var e=sinon.spy(),t=sinon.spy();e(),t(),refute.exception(function(){sinon.assert.callOrder(e,t)})},"fails when calls where done in wrong order":function(){var e=sinon.spy(),t=sinon.spy();t(),e(),assert.exception(function(){sinon.assert.callOrder(e,t)}),assert(sinon.assert.fail.called)},"passes when many calls where done in right order":function(){var e=sinon.spy(),t=sinon.spy(),n=sinon.spy(),r=sinon.spy();e(),t(),n(),r(),refute.exception(function(){sinon.assert.callOrder(e,t,n,r)})},"fails when one of many calls where done in wrong order":function(){var e=sinon.spy(),t=sinon.spy(),n=sinon.spy(),r=sinon.spy();e(),t(),r(),n(),assert.exception(function(){sinon.assert.callOrder(e,t,n,r)}),assert(sinon.assert.fail.called)},"calls pass callback":function(){var e=[sinon.spy(),sinon.spy()];e[0](),e[1](),sinon.assert.callOrder(e[0],e[1]),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("callOrder"))},"passes for multiple calls to same spy":function(){var e=sinon.spy(),t=sinon.spy();e(),t(),e(),refute.exception(function(){sinon.assert.callOrder(e,t,e)})},"fails if first spy was not called":function(){var e=sinon.spy(),t=sinon.spy();t(),assert.exception(function(){sinon.assert.callOrder(e,t)})},"fails if second spy was not called":function(){var e=sinon.spy(),t=sinon.spy();e(),assert.exception(function(){sinon.assert.callOrder(e,t)})}},calledOn:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method does not exist":function(){var e={};sinon.stub(this.stub,"calledOn"),assert.exception(function(){sinon.assert.calledOn(null,e)}),assert.isFalse(this.stub.calledOn.calledWith(e)),assert(sinon.assert.fail.called)},"fails when method is not stub":function(){var e={};sinon.stub(this.stub,"calledOn"),assert.exception(function(){sinon.assert.calledOn(function(){},e)}),assert.isFalse(this.stub.calledOn.calledWith(e)),assert(sinon.assert.fail.called)},"fails when method fails":function(){var e={};sinon.stub(this.stub,"calledOn").returns(!1);var t=this.stub;assert.exception(function(){sinon.assert.calledOn(t,e)}),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){var e={};sinon.stub(this.stub,"calledOn").returns(!0);var t=this.stub;sinon.assert.calledOn(t,e),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){var e={};this.stub.call(e),sinon.assert.calledOn(this.stub,e),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("calledOn"))}},calledWithNew:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method does not exist":function(){sinon.stub(this.stub,"calledWithNew"),assert.exception(function(){sinon.assert.calledWithNew(null)}),assert.isFalse(this.stub.calledWithNew.called),assert(sinon.assert.fail.called)},"fails when method is not stub":function(){sinon.stub(this.stub,"calledWithNew"),assert.exception(function(){sinon.assert.calledWithNew(function(){})}),assert.isFalse(this.stub.calledWithNew.called),assert(sinon.assert.fail.called)},"fails when method fails":function(){sinon.stub(this.stub,"calledWithNew").returns(!1);var e=this.stub;assert.exception(function(){sinon.assert.calledWithNew(e)}),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){sinon.stub(this.stub,"calledWithNew").returns(!0);var e=this.stub;sinon.assert.calledWithNew(e),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){var e=new this.stub;sinon.assert.calledWithNew(this.stub),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("calledWithNew"))}},alwaysCalledWithNew:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method does not exist":function(){sinon.stub(this.stub,"alwaysCalledWithNew"),assert.exception(function(){sinon.assert.alwaysCalledWithNew(null)}),assert.isFalse(this.stub.alwaysCalledWithNew.called),assert(sinon.assert.fail.called)},"fails when method is not stub":function(){sinon.stub(this.stub,"alwaysCalledWithNew"),assert.exception(function(){sinon.assert.alwaysCalledWithNew(function(){})}),assert.isFalse(this.stub.alwaysCalledWithNew.called),assert(sinon.assert.fail.called)},"fails when method fails":function(){sinon.stub(this.stub,"alwaysCalledWithNew").returns(!1);var e=this.stub;assert.exception(function(){sinon.assert.alwaysCalledWithNew(e)}),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){sinon.stub(this.stub,"alwaysCalledWithNew").returns(!0);var e=this.stub;sinon.assert.alwaysCalledWithNew(e),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){var e=new this.stub;sinon.assert.alwaysCalledWithNew(this.stub),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("alwaysCalledWithNew"))}},calledWith:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method fails":function(){var e={};sinon.stub(this.stub,"calledWith").returns(!1);var t=this.stub;assert.exception(function(){sinon.assert.calledWith(t,e,1)}),assert(this.stub.calledWith.calledWith(e,1)),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){var e={};sinon.stub(this.stub,"calledWith").returns(!0);var t=this.stub;refute.exception(function(){sinon.assert.calledWith(t,e,1)}),assert(this.stub.calledWith.calledWith(e,1)),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){this.stub("yeah"),sinon.assert.calledWith(this.stub,"yeah"),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("calledWith"))}},calledWithExactly:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method fails":function(){var e={};sinon.stub(this.stub,"calledWithExactly").returns(!1);var t=this.stub;assert.exception(function(){sinon.assert.calledWithExactly(t,e,1)}),assert(this.stub.calledWithExactly.calledWithExactly(e,1)),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){var e={};sinon.stub(this.stub,"calledWithExactly").returns(!0);var t=this.stub;refute.exception(function(){sinon.assert.calledWithExactly(t,e,1)}),assert(this.stub.calledWithExactly.calledWithExactly(e,1)),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){this.stub("yeah"),sinon.assert.calledWithExactly(this.stub,"yeah"),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("calledWithExactly"))}},neverCalledWith:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method fails":function(){var e={};sinon.stub(this.stub,"neverCalledWith").returns(!1);var t=this.stub;assert.exception(function(){sinon.assert.neverCalledWith(t,e,1)}),assert(this.stub.neverCalledWith.calledWith(e,1)),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){var e={};sinon.stub(this.stub,"neverCalledWith").returns(!0);var t=this.stub;refute.exception(function(){sinon.assert.neverCalledWith(t,e,1)}),assert(this.stub.neverCalledWith.calledWith(e,1)),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){this.stub("yeah"),sinon.assert.neverCalledWith(this.stub,"nah!"),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("neverCalledWith"))}},threwTest:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method fails":function(){sinon.stub(this.stub,"threw").returns(!1);var e=this.stub;assert.exception(function(){sinon.assert.threw(e,1,2)}),assert(this.stub.threw.calledWithExactly(1,2)),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){sinon.stub(this.stub,"threw").returns(!0);var e=this.stub;refute.exception(function(){sinon.assert.threw(e,1,2)}),assert(this.stub.threw.calledWithExactly(1,2)),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){sinon.stub(this.stub,"threw").returns(!0),this.stub(),sinon.assert.threw(this.stub),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("threw"))}},callCount:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails when method fails":function(){this.stub(),this.stub();var e=this.stub;assert.exception(function(){sinon.assert.callCount(e,3)}),assert(sinon.assert.fail.called)},"passes when method doesn't fail":function(){var e=this.stub;this.stub.callCount=3,refute.exception(function(){sinon.assert.callCount(e,3)}),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){this.stub(),sinon.assert.callCount(this.stub,1),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("callCount"))}},alwaysCalledOn:{setUp:function(){this.setUpStubs()},tearDown:function(){this.tearDownStubs()},"fails if method is missing":function(){assert.exception(function(){sinon.assert.alwaysCalledOn()})},"fails if method is not fake":function(){assert.exception(function(){sinon.assert.alwaysCalledOn(function(){},{})})},"fails if stub returns false":function(){var e=sinon.stub();sinon.stub(e,"alwaysCalledOn").returns(!1),assert.exception(function(){sinon.assert.alwaysCalledOn(e,{})}),assert(sinon.assert.fail.called)},"passes if stub returns true":function(){var e=sinon.stub.create();sinon.stub(e,"alwaysCalledOn").returns(!0),sinon.assert.alwaysCalledOn(e,{}),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){this.stub(),sinon.assert.alwaysCalledOn(this.stub,this),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("alwaysCalledOn"))}},alwaysCalledWith:{setUp:function(){sinon.stub(sinon.assert,"fail").throws(),sinon.stub(sinon.assert,"pass")},tearDown:function(){sinon.assert.fail.restore(),sinon.assert.pass.restore()},"fails if method is missing":function(){assert.exception(function(){sinon.assert.alwaysCalledWith()})},"fails if method is not fake":function(){assert.exception(function(){sinon.assert.alwaysCalledWith(function(){})})},"fails if stub returns false":function(){var e=sinon.stub.create();sinon.stub(e,"alwaysCalledWith").returns(!1),assert.exception(function(){sinon.assert.alwaysCalledWith(e,{},[])}),assert(sinon.assert.fail.called)},"passes if stub returns true":function(){var e=sinon.stub.create();sinon.stub(e,"alwaysCalledWith").returns(!0),sinon.assert.alwaysCalledWith(e,{},[]),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){var e=sinon.spy();e("Hello"),sinon.assert.alwaysCalledWith(e,"Hello"),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("alwaysCalledWith"))}},alwaysCalledWithExactly:{setUp:function(){sinon.stub(sinon.assert,"fail"),sinon.stub(sinon.assert,"pass")},tearDown:function(){sinon.assert.fail.restore(),sinon.assert.pass.restore()},"fails if stub returns false":function(){var e=sinon.stub.create();sinon.stub(e,"alwaysCalledWithExactly").returns(!1),sinon.assert.alwaysCalledWithExactly(e,{},[]),assert(sinon.assert.fail.called)},"passes if stub returns true":function(){var e=sinon.stub.create();sinon.stub(e,"alwaysCalledWithExactly").returns(!0),sinon.assert.alwaysCalledWithExactly(e,{},[]),assert.isFalse(sinon.assert.fail.called)},"calls pass callback":function(){var e=sinon.spy();e("Hello"),sinon.assert.alwaysCalledWithExactly(e,"Hello"),assert(sinon.assert.pass.calledOnce),assert(sinon.assert.pass.calledWith("alwaysCalledWithExactly"))}},expose:{"exposes asserts into object":function(){var e={};sinon.assert.expose(e),assert.isFunction(e.fail),assert.isString(e.failException),assert.isFunction(e.assertCalled),assert.isFunction(e.assertCalledOn),assert.isFunction(e.assertCalledWith),assert.isFunction(e.assertCalledWithExactly),assert.isFunction(e.assertThrew),assert.isFunction(e.assertCallCount)},"exposes asserts into global":function(){sinon.assert.expose(this.global,{includeFail:!1}),assert.equals(typeof failException,"undefined"),assert.isFunction(assertCalled),assert.isFunction(assertCalledOn),assert.isFunction(assertCalledWith),assert.isFunction(assertCalledWithExactly),assert.isFunction(assertThrew),assert.isFunction(assertCallCount)},"fails exposed asserts without errors":function(){sinon.assert.expose(this.global,{includeFail:!1});try{assertCalled(sinon.spy())}catch(e){assert.equals(e.message,"expected spy to have been called at least once but was never called")}},"exposes asserts into object without prefixes":function(){var e={};sinon.assert.expose(e,{prefix:""}),assert.isFunction(e.fail),assert.isString(e.failException),assert.isFunction(e.called),assert.isFunction(e.calledOn),assert.isFunction(e.calledWith),assert.isFunction(e.calledWithExactly),assert.isFunction(e.threw),assert.isFunction(e.callCount)},"throws if target is undefined":function(){assert.exception(function(){sinon.assert.expose()},"TypeError")},"throws if target is null":function(){assert.exception(function(){sinon.assert.expose(null)},"TypeError")}},message:{setUp:function(){this.obj={doSomething:function(){}},sinon.spy(this.obj,"doSomething"),this.message=function(e){try{sinon.assert[e].apply(sinon.assert,[].slice.call(arguments,1))}catch(t){return t.message}}},"assert.called exception message":function(){assert.equals(this.message("called",this.obj.doSomething),"expected doSomething to have been called at least once but was never called")},"assert.notCalled exception message one call":function(){this.obj.doSomething(),assert.equals(this.message("notCalled",this.obj.doSomething),"expected doSomething to not have been called but was called once\n    doSomething()")},"assert.notCalled exception message four calls":function(){this.obj.doSomething(),this.obj.doSomething(),this.obj.doSomething(),this.obj.doSomething(),assert.equals(this.message("notCalled",this.obj.doSomething),"expected doSomething to not have been called but was called 4 times\n    doSomething()\n    doSomething()\n    doSomething()\n    doSomething()")},"assert.notCalled exception message with calls with arguments":function(){this.obj.doSomething(),this.obj.doSomething(3),this.obj.doSomething(42,1),this.obj.doSomething(),assert.equals(this.message("notCalled",this.obj.doSomething),"expected doSomething to not have been called but was called 4 times\n    doSomething()\n    doSomething(3)\n    doSomething(42, 1)\n    doSomething()")},"assert.callOrder exception message":function(){var e={doop:function(){},foo:function(){}};sinon.spy(e,"doop"),sinon.spy(e,"foo"),e.doop(),this.obj.doSomething(),e.foo();var t=this.message("callOrder",this.obj.doSomething,e.doop,e.foo);assert.equals(t,"expected doSomething, doop, foo to be called in order but were called as doop, doSomething, foo")},"assert.callOrder with missing first call exception message":function(){var e={doop:function(){},foo:function(){}};sinon.spy(e,"doop"),sinon.spy(e,"foo"),e.foo();var t=this.message("callOrder",e.doop,e.foo);assert.equals(t,"expected doop, foo to be called in order but were called as foo")},"assert.callOrder with missing last call exception message":function(){var e={doop:function(){},foo:function(){}};sinon.spy(e,"doop"),sinon.spy(e,"foo"),e.doop();var t=this.message("callOrder",e.doop,e.foo);assert.equals(t,"expected doop, foo to be called in order but were called as doop")},"assert.callCount exception message":function(){this.obj.doSomething(),assert.equals(this.message("callCount",this.obj.doSomething,3),"expected doSomething to be called thrice but was called once\n    doSomething()")},"assert.calledOnce exception message":function(){this.obj.doSomething(),this.obj.doSomething(),assert.equals(this.message("calledOnce",this.obj.doSomething),"expected doSomething to be called once but was called twice\n    doSomething()\n    doSomething()"),this.obj.doSomething(),assert.equals(this.message("calledOnce",this.obj.doSomething),"expected doSomething to be called once but was called thrice\n    doSomething()\n    doSomething()\n    doSomething()")},"assert.calledTwice exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledTwice",this.obj.doSomething),"expected doSomething to be called twice but was called once\n    doSomething()")},"assert.calledThrice exception message":function(){this.obj.doSomething(),this.obj.doSomething(),this.obj.doSomething(),this.obj.doSomething(),assert.equals(this.message("calledThrice",this.obj.doSomething),"expected doSomething to be called thrice but was called 4 times\n    doSomething()\n    doSomething()\n    doSomething()\n    doSomething()")},"assert.calledOn exception message":function(){this.obj.toString=function(){return"[Oh yeah]"};var e={toString:function(){return"[Oh no]"}},t={toString:function(){return"[Oh well]"}};this.obj.doSomething.call(e),this.obj.doSomething.call(t),assert.equals(this.message("calledOn",this.obj.doSomething,this.obj),"expected doSomething to be called with [Oh yeah] as this but was called with [Oh no], [Oh well]")},"assert.alwaysCalledOn exception message":function(){this.obj.toString=function(){return"[Oh yeah]"};var e={toString:function(){return"[Oh no]"}},t={toString:function(){return"[Oh well]"}};this.obj.doSomething.call(e),this.obj.doSomething.call(t),this.obj.doSomething(),assert.equals(this.message("alwaysCalledOn",this.obj.doSomething,this.obj),"expected doSomething to always be called with [Oh yeah] as this but was called with [Oh no], [Oh well], [Oh yeah]")},"assert.calledWithNew exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWithNew",this.obj.doSomething),"expected doSomething to be called with new")},"assert.alwaysCalledWithNew exception message":function(){var e=new this.obj.doSomething;this.obj.doSomething(),assert.equals(this.message("alwaysCalledWithNew",this.obj.doSomething),"expected doSomething to always be called with new")},"assert.calledWith exception message":function(){this.obj.doSomething(1,3,"hey"),assert.equals(this.message("calledWith",this.obj.doSomething,4,3,"hey"),"expected doSomething to be called with arguments 4, 3, hey\n    doSomething(1, 3, hey)")},"assert.calledWith match.any exception message":function(){this.obj.doSomething(!0,!0),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match.any,!1),"expected doSomething to be called with arguments any, false\n    doSomething(true, true)")},"assert.calledWith match.defined exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match.defined),"expected doSomething to be called with arguments defined\n    doSomething()")},"assert.calledWith match.truthy exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match.truthy),"expected doSomething to be called with arguments truthy\n    doSomething()")},"assert.calledWith match.falsy exception message":function(){this.obj.doSomething(!0),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match.falsy),"expected doSomething to be called with arguments falsy\n    doSomething(true)")},"assert.calledWith match.same exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match.same(1)),"expected doSomething to be called with arguments same(1)\n    doSomething()")},"assert.calledWith match.typeOf exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match.typeOf("string")),'expected doSomething to be called with arguments typeOf("string")\n    doSomething()')},"assert.calledWith match.instanceOf exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match.instanceOf(function(){})),"expected doSomething to be called with arguments instanceOf(CustomType)\n    doSomething()")},"assert.calledWith match object exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match({some:"value",and:123})),"expected doSomething to be called with arguments match(some: value, and: 123)\n    doSomething()")},"assert.calledWith match boolean exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match(!0)),"expected doSomething to be called with arguments match(true)\n    doSomething()")},"assert.calledWith match number exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match(123)),"expected doSomething to be called with arguments match(123)\n    doSomething()")},"assert.calledWith match string exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match("Sinon")),'expected doSomething to be called with arguments match("Sinon")\n    doSomething()')},"assert.calledWith match regexp exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match(/[a-z]+/)),"expected doSomething to be called with arguments match(/[a-z]+/)\n    doSomething()")},"assert.calledWith match test function exception message":function(){this.obj.doSomething(),assert.equals(this.message("calledWith",this.obj.doSomething,sinon.match({test:function(){}})),"expected doSomething to be called with arguments match(custom)\n    doSomething()")},"assert.calledWithMatch exception message":function(){this.obj.doSomething(1,3,"hey"),assert.equals(this.message("calledWithMatch",this.obj.doSomething,4,3,"hey"),"expected doSomething to be called with match 4, 3, hey\n    doSomething(1, 3, hey)")},"assert.alwaysCalledWith exception message":function(){this.obj.doSomething(1,3,"hey"),this.obj.doSomething(1,"hey"),assert.equals(this.message("alwaysCalledWith",this.obj.doSomething,1,"hey"),"expected doSomething to always be called with arguments 1, hey\n    doSomething(1, 3, hey)\n    doSomething(1, hey)")},"assert.alwaysCalledWithMatch exception message":function(){this.obj.doSomething(1,3,"hey"),this.obj.doSomething(1,"hey"),assert.equals(this.message("alwaysCalledWithMatch",this.obj.doSomething,1,"hey"),"expected doSomething to always be called with match 1, hey\n    doSomething(1, 3, hey)\n    doSomething(1, hey)")},"assert.calledWithExactly exception message":function(){this.obj.doSomething(1,3,"hey"),assert.equals(this.message("calledWithExactly",this.obj.doSomething,1,3),"expected doSomething to be called with exact arguments 1, 3\n    doSomething(1, 3, hey)")},"assert.alwaysCalledWithExactly exception message":function(){this.obj.doSomething(1,3,"hey"),this.obj.doSomething(1,3),assert.equals(this.message("alwaysCalledWithExactly",this.obj.doSomething,1,3),"expected doSomething to always be called with exact arguments 1, 3\n    doSomething(1, 3, hey)\n    doSomething(1, 3)")},"assert.neverCalledWith exception message":function(){this.obj.doSomething(1,2,3),assert.equals(this.message("neverCalledWith",this.obj.doSomething,1,2),"expected doSomething to never be called with arguments 1, 2\n    doSomething(1, 2, 3)")},"assert.neverCalledWithMatch exception message":function(){this.obj.doSomething(1,2,3),assert.equals(this.message("neverCalledWithMatch",this.obj.doSomething,1,2),"expected doSomething to never be called with match 1, 2\n    doSomething(1, 2, 3)")},"assert.threw exception message":function(){this.obj.doSomething(1,3,"hey"),this.obj.doSomething(1,3),assert.equals(this.message("threw",this.obj.doSomething),"doSomething did not throw exception\n    doSomething(1, 3, hey)\n    doSomething(1, 3)")},"assert.alwaysThrew exception message":function(){this.obj.doSomething(1,3,"hey"),this.obj.doSomething(1,3),assert.equals(this.message("alwaysThrew",this.obj.doSomething),"doSomething did not always throw exception\n    doSomething(1, 3, hey)\n    doSomething(1, 3)")},"assert.match exception message":function(){assert.equals(this.message("match",{foo:1},[1,3]),"expected value to match\n    expected = [1, 3]\n    actual = { foo: 1 }")}}});