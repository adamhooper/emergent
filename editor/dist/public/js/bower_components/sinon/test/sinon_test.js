/**
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2012 Christian Johansen
 */

if(typeof require=="function"&&typeof module=="object")var buster=require("./runner"),sinon=require("../lib/sinon");buster.testCase("sinon",{".wrapMethod":{setUp:function(){this.method=function(){},this.object={method:this.method}},"is function":function(){assert.isFunction(sinon.wrapMethod)},"throws if first argument is not object":function(){assert.exception(function(){sinon.wrapMethod()},"TypeError")},"throws if object defines property but is not function":function(){this.object.prop=42;var e=this.object;assert.exception(function(){sinon.wrapMethod(e,"prop",function(){})},"TypeError")},"throws if object does not define property":function(){var e=this.object;assert.exception(function(){sinon.wrapMethod(e,"prop",function(){})});try{throw sinon.wrapMethod(e,"prop",function(){}),new Error("Didn't throw")}catch(t){assert.match(t.message,/Attempted to wrap .* property .* as function/)}},"throws if third argument is missing":function(){var e=this.object;assert.exception(function(){sinon.wrapMethod(e,"method")},"TypeError")},"throws if third argument is not function":function(){var e=this.object;assert.exception(function(){sinon.wrapMethod(e,"method",{})},"TypeError")},"replaces object method":function(){sinon.wrapMethod(this.object,"method",function(){}),refute.same(this.method,this.object.method),assert.isFunction(this.object.method)},"throws if method is already wrapped":function(){var e={method:function(){}};sinon.wrapMethod(e,"method",function(){}),assert.exception(function(){sinon.wrapMethod(e,"method",function(){})},"TypeError")},"throws if method is already a spy":function(){var e={method:sinon.spy()};assert.exception(function(){sinon.wrapMethod(e,"method",function(){})},"TypeError")},"originating stack traces":{setUp:function(){this.oldError=Error,this.oldTypeError=TypeError;var e=0;Error=TypeError=function(){this.stack=":STACK"+ ++e+":"}},tearDown:function(){Error=this.oldError,TypeError=this.oldTypeError},"throws with stack trace showing original wrapMethod call":function(){var e={method:function(){}};sinon.wrapMethod(e,"method",function(){return"original"});try{sinon.wrapMethod(e,"method",function(){})}catch(t){assert.equals(t.stack,":STACK2:\n--------------\n:STACK1:")}}},"in browser":{requiresSupportFor:{"window object":typeof window!="undefined"},"does not throw if object is window object":function(){window.sinonTestMethod=function(){};try{refute.exception(function(){sinon.wrapMethod(window,"sinonTestMethod",function(){})})}finally{window.sinonTestMethod=undefined}}},"mirrors function properties":function(){var e={method:function(){}};e.method.prop=42,sinon.wrapMethod(e,"method",function(){}),assert.equals(e.method.prop,42)},"does not mirror and overwrite existing properties":function(){var e={method:function(){}};e.method.called=42,sinon.stub(e,"method"),assert.isFalse(e.method.called)}},"wrapped method":{setUp:function(){this.method=function(){},this.object={method:this.method}},"defines restore method":function(){sinon.wrapMethod(this.object,"method",function(){}),assert.isFunction(this.object.method.restore)},"returns wrapper":function(){var e=sinon.wrapMethod(this.object,"method",function(){});assert.same(this.object.method,e)},"restore brings back original method":function(){sinon.wrapMethod(this.object,"method",function(){}),this.object.method.restore(),assert.same(this.object.method,this.method)}},"wrapped prototype method":{setUp:function(){this.type=function(){},this.type.prototype.method=function(){},this.object=new this.type},"wrap adds owned property":function(){var e=sinon.wrapMethod(this.object,"method",function(){});assert.same(this.object.method,e),assert(this.object.hasOwnProperty("method"))},"restore removes owned property":function(){sinon.wrapMethod(this.object,"method",function(){}),this.object.method.restore(),assert.same(this.object.method,this.type.prototype.method),assert.isFalse(this.object.hasOwnProperty("method"))}},deepEqual:{"passes null":function(){assert(sinon.deepEqual(null,null))},"fails null and object":function(){assert.isFalse(sinon.deepEqual(null,{}))},"fails object and null":function(){assert.isFalse(sinon.deepEqual({},null))},"fails error and object":function(){assert.isFalse(sinon.deepEqual(new Error,{}))},"fails object and error":function(){assert.isFalse(sinon.deepEqual({},new Error))},"fails regexp and object":function(){assert.isFalse(sinon.deepEqual(/.*/,{}))},"fails object and regexp":function(){assert.isFalse(sinon.deepEqual({},/.*/))},"passes primitives":function(){assert(sinon.deepEqual(1,1))},"passes same object":function(){var e={};assert(sinon.deepEqual(e,e))},"passes same function":function(){var e=function(){};assert(sinon.deepEqual(e,e))},"passes same array":function(){var e=[];assert(sinon.deepEqual(e,e))},"passes same regexp":function(){var e=/foo/;assert(sinon.deepEqual(e,e))},"passes equal arrays":function(){var e=[1,2,3,"hey","there"],t=[1,2,3,"hey","there"];assert(sinon.deepEqual(e,t))},"passes equal arrays with custom properties":function(){var e=[1,2,3,"hey","there"],t=[1,2,3,"hey","there"];e.foo="bar",t.foo="bar",assert(sinon.deepEqual(e,t))},"fails arrays with unequal custom properties":function(){var e=[1,2,3,"hey","there"],t=[1,2,3,"hey","there"];e.foo="bar",t.foo="not bar",assert.isFalse(sinon.deepEqual(e,t))},"passes equal regexps":function(){var e=/foo/,t=/foo/;assert(sinon.deepEqual(e,t))},"fails unequal regexps":function(){var e=/foo/,t=/bar/;assert.isFalse(sinon.deepEqual(e,t))},"passes equal regexps with same ignoreCase flags":function(){var e=/foo/i,t=/foo/i;assert(sinon.deepEqual(e,t))},"fails unequal regexps with different ignoreCase flags":function(){var e=/foo/i,t=/foo/;assert.isFalse(sinon.deepEqual(e,t))},"passes equal regexps with same multiline flags":function(){var e=/foo/m,t=/foo/m;assert(sinon.deepEqual(e,t))},"fails unequal regexps with different multiline flags":function(){var e=/foo/m,t=/foo/;assert.isFalse(sinon.deepEqual(e,t))},"passes equal regexps with same global flags":function(){var e=/foo/g,t=/foo/g;assert(sinon.deepEqual(e,t))},"fails unequal regexps with different global flags":function(){var e=/foo/g,t=/foo/;assert.isFalse(sinon.deepEqual(e,t))},"passes equal regexps with multiple flags":function(){var e=/bar/im,t=/bar/im;assert(sinon.deepEqual(e,t))},"fails unequal regexps with multiple flags":function(){var e=/bar/im,t=/bar/ig;assert.isFalse(sinon.deepEqual(e,t))},"passes NaN and NaN":function(){assert(sinon.deepEqual(NaN,NaN))},"passes equal objects":function(){var e={a:1,b:2,c:3,d:"hey",e:"there"},t={b:2,c:3,a:1,d:"hey",e:"there"};assert(sinon.deepEqual(e,t))},"fails unequal objects with undefined properties with different names":function(){var e={a:1,b:2,c:3},t={a:1,b:2,foo:undefined};assert.isFalse(sinon.deepEqual(e,t))},"fails unequal objects with undefined properties with different names (different arg order)":function(){var e={a:1,b:2,foo:undefined},t={a:1,b:2,c:3};assert.isFalse(sinon.deepEqual(e,t))},"passes equal dates":function(){var e=new Date(2012,3,5),t=new Date(2012,3,5);assert(sinon.deepEqual(e,t))},"fails different dates":function(){var e=new Date(2012,3,5),t=new Date(2013,3,5);assert.isFalse(sinon.deepEqual(e,t))},"in browsers":{requiresSupportFor:{"document object":typeof document!="undefined"},"passes same DOM elements":function(){var e=document.createElement("div");assert(sinon.deepEqual(e,e))},"fails different DOM elements":function(){var e=document.createElement("div"),t=document.createElement("div");assert.isFalse(sinon.deepEqual(e,t))},"does not modify DOM elements when comparing them":function(){var e=document.createElement("div");document.body.appendChild(e),sinon.deepEqual(e,{}),assert.same(e.parentNode,document.body),assert.equals(e.childNodes.length,0)}},"passes deep objects":function(){var e=function(){},t={a:1,b:2,c:3,d:"hey",e:"there",f:e,g:{a1:[1,2,"3",{prop:[e,"b"]}]}},n={a:1,b:2,c:3,d:"hey",e:"there",f:e,g:{a1:[1,2,"3",{prop:[e,"b"]}]}};assert(sinon.deepEqual(t,n))}},extend:{"copies all properties":function(){var e={prop1:null,prop2:!1},t={prop3:"hey",prop4:4},n=sinon.extend({},e,t),r={prop1:null,prop2:!1,prop3:"hey",prop4:4};assert.equals(n,r)}},"Function.prototype.toString":{"returns function's displayName property":function(){var e=function(){};e.displayName="Larry",assert.equals(sinon.functionToString.call(e),"Larry")},"guesses name from last call's this object":function(){var e={};e.doStuff=sinon.spy(),e.doStuff.call({}),e.doStuff(),assert.equals(sinon.functionToString.call(e.doStuff),"doStuff")},"guesses name from any call where property can be located":function(){var e={},t={id:42};e.doStuff=sinon.spy(),e.doStuff.call({}),e.doStuff(),e.doStuff.call(t),assert.equals(sinon.functionToString.call(e.doStuff),"doStuff")}},config:{"gets copy of default config":function(){var e=sinon.getConfig();refute.same(e,sinon.defaultConfig),assert.equals(e.injectIntoThis,sinon.defaultConfig.injectIntoThis),assert.equals(e.injectInto,sinon.defaultConfig.injectInto),assert.equals(e.properties,sinon.defaultConfig.properties),assert.equals(e.useFakeTimers,sinon.defaultConfig.useFakeTimers),assert.equals(e.useFakeServer,sinon.defaultConfig.useFakeServer)},"should override specified properties":function(){var e=sinon.getConfig({properties:["stub","mock"],useFakeServer:!1});refute.same(e,sinon.defaultConfig),assert.equals(e.injectIntoThis,sinon.defaultConfig.injectIntoThis),assert.equals(e.injectInto,sinon.defaultConfig.injectInto),assert.equals(e.properties,["stub","mock"]),assert.equals(e.useFakeTimers,sinon.defaultConfig.useFakeTimers),assert.isFalse(e.useFakeServer)}},log:{"does nothing gracefully":function(){refute.exception(function(){sinon.log("Oh, hiya")})}},format:{"formats with formatio by default":function(){assert.equals(sinon.format({id:42}),"{ id: 42 }")},"formats strings without quotes":function(){assert.equals(sinon.format("Hey"),"Hey")}},typeOf:{"returns boolean":function(){assert.equals(sinon.typeOf(!1),"boolean")},"returns string":function(){assert.equals(sinon.typeOf("Sinon.JS"),"string")},"returns number":function(){assert.equals(sinon.typeOf(123),"number")},"returns object":function(){assert.equals(sinon.typeOf({}),"object")},"returns function":function(){assert.equals(sinon.typeOf(function(){}),"function")},"returns undefined":function(){assert.equals(sinon.typeOf(undefined),"undefined")},"returns null":function(){assert.equals(sinon.typeOf(null),"null")},"returns array":function(){assert.equals(sinon.typeOf([]),"array")},"returns regexp":function(){assert.equals(sinon.typeOf(/.*/),"regexp")},"returns date":function(){assert.equals(sinon.typeOf(new Date),"date")}},".createStubInstance":{"stubs existing methods":function(){var e=function(){};e.prototype.method=function(){};var t=sinon.createStubInstance(e);t.method.returns(3),assert.equals(3,t.method())},"doesn't stub fake methods":function(){var e=function(){},t=sinon.createStubInstance(e);assert.exception(function(){t.method.returns(3)})},"doesn't call the constructor":function(){var e=function(e,t){var n=e+t;throw n};e.prototype.method=function(){};var t=sinon.createStubInstance(e);refute.exception(function(){t.method(3)})},"retains non function values":function(){var e="some-value",t=function(){};t.prototype.type=e;var n=sinon.createStubInstance(t);assert.equals(e,n.type)},"has no side effects on the prototype":function(){var e={method:function(){throw"error"}},t=function(){};t.prototype=e;var n=sinon.createStubInstance(t);refute.exception(n.method),assert.exception(e.method)},"throws exception for non function params":function(){var e=[{},3,"hi!"];for(var t=0;t<e.length;t++)assert.exception(function(){sinon.createStubInstance(e[t])})}},".restore":{"restores all methods of supplied object":function(){var e=function(){},t=function(){},n={methodA:e,methodB:t};sinon.stub(n),sinon.restore(n),assert.same(n.methodA,e),assert.same(n.methodB,t)},"only restores restorable methods":function(){var e=function(){},t=function(){},n={stubbedMethod:e,vanillaMethod:t};sinon.stub(n,"stubbedMethod"),sinon.restore(n),assert.same(n.stubbedMethod,e)},"restores a single stubbed method":function(){var e=function(){},t={method:e};sinon.stub(t),sinon.restore(t.method),assert.same(t.method,e)}}});