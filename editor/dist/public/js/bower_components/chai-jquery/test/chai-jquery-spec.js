describe("jQuery assertions",function(){var e;chai.use(function(t,n){e=n.objDisplay,t.Assertion.addMethod("fail",function(r){var i=n.flag(this,"object");(new t.Assertion(i)).is.a("function");try{i()}catch(s){this.assert(s instanceof t.AssertionError,"expected #{this} to fail, but it threw "+e(s)),this.assert(s.message===r,"expected #{this} to fail with "+e(r)+", but got "+e(s.message));return}this.assert(!1,"expected #{this} to fail")})}),describe("attr",function(){var t=$('<div name="foo"></div>');describe("when only attribute name is provided",function(){it("passes when the element has the attribute",function(){t.should.have.attr("name")}),it("passes negated when the element does not have the attribute",function(){t.should.not.have.attr("bar")}),it("fails when the element does not have the attribute",function(){(function(){t.should.have.attr("bar")}).should.fail("expected "+e(t)+" to have a 'bar' attribute")}),it("fails negated when the element has the attribute",function(){(function(){t.should.not.have.attr("name")}).should.fail("expected "+e(t)+" not to have a 'name' attribute")})}),describe("when attribute name and value are provided",function(){it("passes when the element has the attribute with the given value",function(){t.should.have.attr("name","foo")}),it("passes negated when the element does not have the attribute",function(){t.should.not.have.attr("bar","foo")}),it("passes negated when the element has the attribute with a different value",function(){t.should.not.have.attr("name","bar")}),it("fails when the element does not have the attribute",function(){(function(){t.should.have.attr("bar","foo")}).should.fail("expected "+e(t)+" to have a 'bar' attribute")}),it("fails when the element has the attribute with a different value",function(){(function(){t.should.have.attr("name","bar")}).should.fail("expected "+e(t)+" to have a 'name' attribute with the value 'bar', but the value was 'foo'")}),it("fails negated when the element has the attribute with the given value",function(){(function(){t.should.not.have.attr("name","foo")}).should.fail("expected "+e(t)+" not to have a 'name' attribute with the value 'foo'")})}),it("chains",function(){t.should.have.attr("name").equal("foo")})}),describe("data",function(){var e=$('<div data-name="foo"></div>');describe("when only key is provided",function(){it("passes when the element's data has the key",function(){e.should.have.data("name")}),it("passes negated when the element's data does not have the key",function(){e.should.not.have.data("bar")}),it("fails when the element's data does not have the key",function(){(function(){e.should.have.data("bar")}).should.fail("expected { name: 'foo' } to have a property 'bar'")}),it("fails negated when the element's data has the key",function(){(function(){e.should.not.have.data("name")}).should.fail("expected { name: 'foo' } to not have property 'name'")})}),describe("when key and value are provided",function(){it("passes when the element's data has the key with the given value",function(){e.should.have.data("name","foo")}),it("passes negated when the element's data does not have the key",function(){e.should.not.have.data("bar","foo")}),it("passes negated when the element's data has the key with a different value",function(){e.should.not.have.data("name","bar")}),it("fails when the element's data does not have the key",function(){(function(){e.should.have.data("bar","foo")}).should.fail("expected { name: 'foo' } to have a property 'bar'")}),it("fails when the element's data has the key with a different value",function(){(function(){e.should.have.data("name","bar")}).should.fail("expected { name: 'foo' } to have a property 'name' of 'bar', but got 'foo'")}),it("fails negated when the element's data has the key with the given value",function(){(function(){e.should.not.have.data("name","foo")}).should.fail("expected { name: 'foo' } to not have a property 'name' of 'foo'")})}),it("chains",function(){e.should.have.data("name").equal("foo")})}),describe("css",function(){var t=$('<div style="position:absolute;"></div>');describe("when only property name is provided",function(){it("passes when the element's css has the property",function(){t.should.have.css("position")}),it("passes negated when the element's css does not have the property",function(){t.should.not.have.css("nonexistent")}),it("fails when the element's css does not have the property",function(){(function(){t.should.have.css("nonexistent")}).should.fail("expected "+e(t)+" to have a 'nonexistent' CSS property")}),it("fails negated when the element's css has the property",function(){(function(){t.should.not.have.css("position")}).should.fail("expected "+e(t)+" not to have a 'position' CSS property")})}),describe("when property name and value are provided",function(){it("passes when the element's css has the property with the given value",function(){t.should.have.css("position","absolute")}),it("passes negated when the element's css does not have the given property",function(){t.should.not.have.css("display","none")}),it("passes negated when the element's css has the property with a different value",function(){t.should.not.have.css("position","relative")}),it("fails when the element's css does not have the property",function(){(function(){t.should.have.css("nonexistent","none")}).should.fail("expected "+e(t)+" to have a 'nonexistent' CSS property")}),it("fails when the element's css has the property with a different value",function(){(function(){t.should.have.css("position","relative")}).should.fail("expected "+e(t)+" to have a 'position' CSS property with the value 'relative', but the value was 'absolute'")}),it("fails negated when the element's css has the property with the given value",function(){(function(){t.should.not.have.css("position","absolute")}).should.fail("expected "+e(t)+" not to have a 'position' CSS property with the value 'absolute'")})}),it("chains",function(){t.should.have.css("position").equal("absolute")})}),describe("prop",function(){var t=$('<input type="checkbox" checked></input>');describe("when only property name is provided",function(){it("passes when the element has the property",function(){t.should.have.prop("checked")}),it("passes when the property exists by default",function(){t.should.have.prop("disabled")}),it("passes negated when the property does not exists by default",function(){t.should.not.have.prop("selectedIndex")}),it("fails negated when the element has the property",function(){(function(){t.should.not.have.prop("checked")}).should.fail("expected "+e(t)+" not to have a 'checked' property")}),it("fails negated when the property exists by default",function(){(function(){t.should.not.have.prop("disabled")}).should.fail("expected "+e(t)+" not to have a 'disabled' property")}),it("fails when the element does not have the property",function(){(function(){t.should.have.prop("selectedIndex")}).should.fail("expected "+e(t)+" to have a 'selectedIndex' property")})}),describe("when property name and value are provided",function(){it("passes when the element has the property with the given value",function(){t.should.have.prop("checked",!0)}),it("passes when the property has the given value by default",function(){t.should.have.prop("disabled",!1)}),it("passes negated when the element has the property with a different value",function(){t.should.not.have.prop("checked",!1)}),it("passes negated when the property has a different value by default",function(){t.should.not.have.prop("disabled",!0)}),it("passes negated when the property does not exists by default",function(){t.should.not.have.prop("selectedIndex",0)}),it("fails when the element has the property with a different value",function(){(function(){t.should.have.prop("checked",!1)}).should.fail("expected "+e(t)+" to have a 'checked' property with the value false, but the value was true")}),it("fails when the property has a different value by default",function(){(function(){t.should.have.prop("disabled",!0)}).should.fail("expected "+e(t)+" to have a 'disabled' property with the value true, but the value was false")}),it("fails when the property does not exist by default",function(){(function(){t.should.have.prop("selectedIndex",0)}).should.fail("expected "+e(t)+" to have a 'selectedIndex' property")}),it("fails negated when the element has the property with the given value",function(){(function(){t.should.not.have.prop("checked",!0)}).should.fail("expected "+e(t)+" not to have a 'checked' property with the value true")}),it("fails negated when the property has the given value by default",function(){(function(){t.should.not.have.prop("disabled",!1)}).should.fail("expected "+e(t)+" not to have a 'disabled' property with the value false")})}),it("chains",function(){t.should.have.prop("checked").equal(!0)})}),describe("class",function(){var t=$('<div class="foo"></div>');it("passes when the element has the class",function(){t.should.have.class("foo")}),it("passes negated when the element does not have the class",function(){t.should.not.have.class("bar")}),it("fails when the element does not have the class",function(){(function(){t.should.have.class("bar")}).should.fail("expected "+e(t)+" to have class 'bar'")}),it("fails negated when the element has the class",function(){(function(){t.should.not.have.class("foo")}).should.fail("expected "+e(t)+" not to have class 'foo'")})}),describe("id",function(){var t=$('<div id="foo"></div>');it("passes when the element has the id",function(){t.should.have.id("foo")}),it("passes negated when the element does not have the id",function(){t.should.not.have.id("bar")}),it("passes negated when the element does not have an id",function(){$("<div></div>").should.not.have.id("bar")}),it("fails when the element does not have the id",function(){(function(){t.should.have.id("bar")}).should.fail("expected "+e(t)+" to have id 'bar'")}),it("fails negated when the element has the id",function(){(function(){t.should.not.have.id("foo")}).should.fail("expected "+e(t)+" not to have id 'foo'")}),it("fails when the element does not have an id",function(){var t=$("<div></div>");(function(){t.should.have.id("foo")}).should.fail("expected "+e(t)+" to have id 'foo'")})}),describe("html",function(){var t=$("<div><span>span</span></div>");it("passes when the HTML matches",function(){t.should.have.html("<span>span</span>")}),it("passes negated when the HTML doesn't match",function(){t.should.not.have.html("<span>div</span>")}),it("fails when the HTML doesn't match",function(){(function(){t.should.have.html("<span>div</span>")}).should.fail("expected "+e(t)+" to have HTML '<span>div</span>', but the HTML was '<span>span</span>'")}),it("fails negated when the HTML matches",function(){(function(){t.should.not.have.html("<span>span</span>")}).should.fail("expected "+e(t)+" not to have HTML '<span>span</span>'")})}),describe("text",function(){var t=$("<div>foo</div>");it("passes when the text matches",function(){t.should.have.text("foo")}),it("passes negated when the text doesn't match",function(){t.should.not.have.text("bar")}),it("fails when the text doesn't match",function(){(function(){t.should.have.text("bar")}).should.fail("expected "+e(t)+" to have text 'bar', but the text was 'foo'")}),it("fails negated when the text matches",function(){(function(){t.should.not.have.text("foo")}).should.fail("expected "+e(t)+" not to have text 'foo'")})}),describe("value",function(){var t=$('<input value="foo">');it("passes when the value matches",function(){t.should.have.value("foo")}),it("passes negated when the value doesn't match",function(){t.should.not.have.value("bar")}),it("fails when the value doesn't match",function(){(function(){t.should.have.value("bar")}).should.fail("expected "+e(t)+" to have value 'bar', but the value was 'foo'")}),it("fails negated when the value matches",function(){(function(){t.should.not.have.value("foo")}).should.fail("expected "+e(t)+" not to have value 'foo'")})}),describe("visible",function(){var t=$("<div></div>"),n=$('<div style="display: none;"></div>');beforeEach(function(){$(t,n).appendTo("#mocha")}),afterEach(function(){$(t,n).remove()}),it("passes when the element is visible",function(){t.should.be.visible}),it("passes negated when the element is hidden",function(){n.should.not.be.visible}),it("fails when the element is hidden",function(){(function(){n.should.be.visible}).should.fail("expected "+e(n)+" to be visible")}),it("fails negated when element is visible",function(){(function(){t.should.not.be.visible}).should.fail("expected "+e(t)+" not to be visible")})}),describe("hidden",function(){var t=$("<div></div>"),n=$('<div style="display: none;"></div>');beforeEach(function(){$(t,n).appendTo("#mocha")}),afterEach(function(){$(t,n).remove()}),it("passes when the element is hidden",function(){n.should.be.hidden}),it("passes negated when the element is visible",function(){t.should.not.be.hidden}),it("fails when the element is visible",function(){(function(){t.should.be.hidden}).should.fail("expected "+e(t)+" to be hidden")}),it("fails negated when element is hidden",function(){(function(){n.should.not.be.hidden}).should.fail("expected "+e(n)+" not to be hidden")})}),describe("selected",function(){var t=$('<option selected="selected"></option>'),n=$("<option></option>");it("passes when the element is selected",function(){t.should.be.selected}),it("passes negated when the element is not selected",function(){n.should.not.be.selected}),it("fails when the element is not selected",function(){(function(){n.should.be.selected}).should.fail("expected "+e(n)+" to be selected")}),it("fails negated when element is selected",function(){(function(){t.should.not.be.selected}).should.fail("expected "+e(t)+" not to be selected")})}),describe("checked",function(){var t=$('<input type="checkbox" checked="checked">'),n=$("<input>");it("passes when the element is checked",function(){t.should.be.checked}),it("passes negated when the element is not checked",function(){n.should.not.be.checked}),it("fails when the element is not checked",function(){(function(){n.should.be.checked}).should.fail("expected "+e(n)+" to be checked")}),it("fails negated when element is checked",function(){(function(){t.should.not.be.checked}).should.fail("expected "+e(t)+" not to be checked")})}),describe("enabled",function(){var t=$('<input disabled="disabled">'),n=$("<input>");it("passes when the element is enabled",function(){n.should.be.enabled}),it("passes negated when the element is disabled",function(){t.should.not.be.enabled}),it("fails when the element is disabled",function(){(function(){t.should.be.enabled}).should.fail("expected "+e(t)+" to be enabled")}),it("fails negated when element is enabled",function(){(function(){n.should.not.be.enabled}).should.fail("expected "+e(n)+" not to be enabled")})}),describe("disabled",function(){var t=$('<input disabled="disabled">'),n=$("<input>");it("passes when the element is disabled",function(){t.should.be.disabled}),it("passes negated when the element is enabled",function(){n.should.not.be.disabled}),it("fails when the element is enabled",function(){(function(){n.should.be.disabled}).should.fail("expected "+e(n)+" to be disabled")}),it("fails negated when element is disabled",function(){(function(){t.should.not.be.disabled}).should.fail("expected "+e(t)+" not to be disabled")})}),describe("exist",function(){it("preserves existing behavior on non-jQuery objects",function(){(({})).should.exist});var e,t;beforeEach(function(){e=$("#mocha"),t=$("#foo")}),it("passes when the selection isn't empty",function(){e.should.exist}),it("passes negated when the selection is empty",function(){t.should.not.exist}),it("fails when the selection is empty",function(){(function(){t.should.exist}).should.fail("expected '#foo' to exist")}),it("fails negated when the selection isn't empty",function(){(function(){e.should.not.exist}).should.fail("expected '#mocha' not to exist")})}),describe("empty",function(){it("preserves existing behavior on non-jQuery objects",function(){(({})).should.be.empty});var t=$("<div></div>"),n=$("<div><span></span></div>");it("passes when the elment has no children",function(){t.should.be.empty}),it("passes negated when the elment has children",function(){n.should.not.be.empty}),it("fails when the elment has children",function(){(function(){n.should.be.empty}).should.fail("expected "+e(n)+" to be empty")}),it("fails negated when the elment has no children",function(){(function(){t.should.not.be.empty}).should.fail("expected "+e(t)+" not to be empty")})}),describe("match",function(){it("preserves existing behavior on non-jQuery objects",function(){"hello".should.match(/ello/)});var t=$('<div id="foo"></div>');it("passes when the selection matches the given selector",function(){t.should.match("#foo")}),it("passes negated when the selection does not match the given selector",function(){t.should.not.match("#bar")}),it("fails when the selection does not match the given selector",function(){(function(){t.should.match("#bar")}).should.fail("expected "+e(t)+" to match '#bar'")}),it("fails negated when the selection matches the given selector",function(){(function(){t.should.not.match("#foo")}).should.fail("expected "+e(t)+" not to match '#foo'")})}),describe("be",function(){it("preserves existing behavior on non-jQuery objects",function(){"hello".should.be.equal("hello")});var t=$("<div></div>");it("passes when the selection matches the given selector",function(){t.should.be(":empty")}),it("passes negated when the selection does not match the given selector",function(){t.should.not.be(":parent")}),it("fails when the selection does not match the given selector",function(){(function(){t.should.be(":parent")}).should.fail("expected "+e(t)+" to be ':parent'")}),it("fails negated when the selection matches the given selector",function(){(function(){t.should.not.be(":empty")}).should.fail("expected "+e(t)+" not to be ':empty'")})}),describe("contain",function(){it("preserves existing behavior on non-jQuery objects",function(){"example text".should.contain("example"),"foo".should.not.contain("bar"),{foo:1,bar:2}.should.contain.keys("foo"),function(){"foo".should.contain("bar")}.should.fail("expected 'foo' to include 'bar'"),function(){"foo".should.not.contain("bar").and.not.contain("foo")}.should.fail("expected 'foo' to not include 'foo'")});var t=$("<div><span>example text</span></div>");it("passes when the selection contains the given text",function(){t.should.contain("example")}),it("passes negated when the selection does not contain the given text",function(){t.should.not.contain("nonesuch")}),it("fails when the selection does not contain the given text",function(){(function(){t.should.contain("nonesuch")}).should.fail("expected "+e(t)+" to contain 'nonesuch'")}),it("fails negated when the selection contains the given text",function(){(function(){t.should.not.contain("example")}).should.fail("expected "+e(t)+" not to contain 'example'")}),it("handles quotes",function(){$('<div>"quote"</div>').should.contain('"quote"'),$("<div>'quote'</div>").should.contain("'quote'")})}),describe("have",function(){it("preserves existing behavior on non-jQuery objects",function(){(({foo:1,bar:2})).should.have.property("foo")}),it("preserves length assertion on non-jQuery objects",function(){["foo","bar"].should.have.length(2)});var t=$("<div><span></span></div>");it("passes when the selection has the given selector",function(){t.should.have("span")}),it("passes negated when the selection does not have the given selector",function(){t.should.not.have("div")}),it("fails when the selection does not have the given selector",function(){(function(){t.should.have("div")}).should.fail("expected "+e(t)+" to have 'div'")}),it("fails negated when the selection has the given selector",function(){(function(){t.should.not.have("span")}).should.fail("expected "+e(t)+" not to have 'span'")})})});