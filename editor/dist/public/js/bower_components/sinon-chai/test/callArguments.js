(function(){var e;e=require("sinon"),describe("Call arguments",function(){var t,n,r,i,s;return s=null,n=null,r=null,i=null,t=null,beforeEach(function(){return s=e.spy(),n="A",r="B",i="C",t=e.match.any}),describe("calledWith",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return s.should.have.been.calledWith(n,r)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){return s(n,r),expect(function(){return s.should.have.been.calledWith(n,r)}).to.not["throw"](),expect(function(){return s.getCall(0).should.have.been.calledWith(n,r)}).to.not["throw"]()}),it("should not throw when the spy is called with the correct arguments and more",function(){return s(n,r,i),expect(function(){return s.should.have.been.calledWith(n,r)}).to.not["throw"](),expect(function(){return s.getCall(0).should.have.been.calledWith(n,r)}).to.not["throw"]()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){return s(i,n),expect(function(){return s.should.have.been.calledWith(n,r)}).to["throw"](AssertionError),expect(function(){return s.getCall(0).should.have.been.calledWith(n,r)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){return s(i,n),s(n,r),expect(function(){return s.should.have.been.calledWith(n,r)}).to.not["throw"](),expect(function(){return s.getCall(1).should.have.been.calledWith(n,r)}).to.not["throw"]()})}),describe("always calledWith",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return s.should.always.have.been.calledWith(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWith(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWith(n,r)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){return s(n,r),expect(function(){return s.should.always.have.been.calledWith(n,r)}).to.not["throw"](),expect(function(){return s.should.have.always.been.calledWith(n,r)}).to.not["throw"](),expect(function(){return s.should.have.been.always.calledWith(n,r)}).to.not["throw"]()}),it("should not throw when the spy is called with the correct arguments and more",function(){return s(n,r,i),expect(function(){return s.should.always.have.been.calledWith(n,r)}).to.not["throw"](),expect(function(){return s.should.have.always.been.calledWith(n,r)}).to.not["throw"](),expect(function(){return s.should.have.been.always.calledWith(n,r)}).to.not["throw"]()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){return s(i,n),expect(function(){return s.should.always.have.been.calledWith(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWith(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWith(n,r)}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){return s(i,n),s(n,r),expect(function(){return s.should.always.have.been.calledWith(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWith(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWith(n,r)}).to["throw"](AssertionError)})}),describe("calledWithExactly",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return s.should.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){return s(n,r),expect(function(){return s.should.have.been.calledWithExactly(n,r)}).to.not["throw"](),expect(function(){return s.getCall(0).should.have.been.calledWithExactly(n,r)}).to.not["throw"]()}),it("should throw an assertion error when the spy is called with the correct arguments and more",function(){return s(n,r,i),expect(function(){return s.should.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.getCall(0).should.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){return s(i,n),expect(function(){return s.should.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.getCall(0).should.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){return s(i,n),s(n,r),expect(function(){return s.should.have.been.calledWithExactly(n,r)}).to.not["throw"](),expect(function(){return s.getCall(1).should.have.been.calledWithExactly(n,r)}).to.not["throw"]()})}),describe("always calledWithExactly",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return s.should.always.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWithExactly(n,r)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){return s(n,r),expect(function(){return s.should.always.have.been.calledWithExactly(n,r)}).to.not["throw"](),expect(function(){return s.should.have.always.been.calledWithExactly(n,r)}).to.not["throw"](),expect(function(){return s.should.have.been.always.calledWithExactly(n,r)}).to.not["throw"]()}),it("should throw an assertion error when the spy is called with the correct arguments and more",function(){return s(n,r,i),expect(function(){return s.should.always.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWithExactly(n,r)}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){return s(i,n),expect(function(){return s.should.always.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWithExactly(n,r)}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){return s(i,n),s(n,r),expect(function(){return s.should.always.have.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWithExactly(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWithExactly(n,r)}).to["throw"](AssertionError)})}),describe("calledWithMatch",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return s.should.have.been.calledWithMatch(t,t)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){return s(n,r),expect(function(){return s.should.have.been.calledWithMatch(t,t)}).to.not["throw"](),expect(function(){return s.getCall(0).should.have.been.calledWithMatch(t,t)}).to.not["throw"]()}),it("should not throw when the spy is called with the correct arguments and more",function(){return s(n,r,i),expect(function(){return s.should.have.been.calledWithMatch(t,t)}).to.not["throw"](),expect(function(){return s.getCall(0).should.have.been.calledWithMatch(t,t)}).to.not["throw"]()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){return s(i,n),expect(function(){return s.should.have.been.calledWithMatch(t,r)}).to["throw"](AssertionError),expect(function(){return s.getCall(0).should.have.been.calledWithMatch(n,t)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){return s(i,n),s(n,r),expect(function(){return s.should.have.been.calledWithMatch(n,r)}).to.not["throw"](),expect(function(){return s.getCall(1).should.have.been.calledWithMatch(n,r)}).to.not["throw"]()})}),describe("always calledWithMatch",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return s.should.always.have.been.calledWithMatch(t,t)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWithMatch(n,t)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWithMatch(t,r)}).to["throw"](AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){return s(n,r),expect(function(){return s.should.always.have.been.calledWithMatch(t,t)}).to.not["throw"](),expect(function(){return s.should.have.always.been.calledWithMatch(t,r)}).to.not["throw"](),expect(function(){return s.should.have.been.always.calledWithMatch(n,t)}).to.not["throw"]()}),it("should not throw when the spy is called with the correct arguments and more",function(){return s(n,r,i),expect(function(){return s.should.always.have.been.calledWithMatch(t,t)}).to.not["throw"](),expect(function(){return s.should.have.always.been.calledWithMatch(t,r)}).to.not["throw"](),expect(function(){return s.should.have.been.always.calledWithMatch(n,t)}).to.not["throw"]()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){return s(i,n),expect(function(){return s.should.always.have.been.calledWithMatch(t,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWithMatch(n,t)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWithMatch(n,r)}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){return s(i,n),s(n,r),expect(function(){return s.should.always.have.been.calledWithMatch(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.always.been.calledWithMatch(n,r)}).to["throw"](AssertionError),expect(function(){return s.should.have.been.always.calledWithMatch(n,r)}).to["throw"](AssertionError)})})})}).call(this);