(function(){var e;e=require("sinon"),describe("Call count",function(){var t;return t=null,beforeEach(function(){return t=e.spy()}),describe("called",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return t.should.have.been.called}).to["throw"](AssertionError)}),it("should not throw when the spy is called once",function(){return t(),expect(function(){return t.should.have.been.called}).to.not["throw"]()}),it("should not throw when the spy is called twice",function(){return t(),t(),expect(function(){return t.should.have.been.called}).to.not["throw"]()})}),describe("not called",function(){return it("should not throw when the spy is not called",function(){return expect(function(){return t.should.not.have.been.called}).to.not["throw"]()}),it("should throw an assertion error when the spy is called once",function(){return t(),expect(function(){return t.should.not.have.been.called}).to["throw"](AssertionError)})}),describe("callCount",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return t.should.have.callCount()}).to["throw"](AssertionError)}),it("should not throw an assertion error when the number of calls equals provided call count",function(){return t(),t(),t(),t(),expect(function(){return t.should.have.callCount(4)}).to.not["throw"](AssertionError)}),it("should throw an assertion error whenever the number of calls are not equal to provided call count",function(){return t(),t(),t(),expect(function(){return t.should.have.callCount(4)}).to["throw"](AssertionError)})}),describe("calledOnce",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return t.should.have.been.calledOnce}).to["throw"](AssertionError)}),it("should not throw when the spy is called once",function(){return t(),expect(function(){return t.should.have.been.calledOnce}).to.not["throw"]()}),it("should throw an assertion error when the spy is called twice",function(){return t(),t(),expect(function(){return t.should.have.been.calledOnce}).to["throw"](AssertionError)})}),describe("calledTwice",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return t.should.have.been.calledTwice}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called once",function(){return t(),expect(function(){return t.should.have.been.calledTwice}).to["throw"](AssertionError)}),it("should not throw when the spy is called twice",function(){return t(),t(),expect(function(){return t.should.have.been.calledTwice}).to.not["throw"]()}),it("should throw an assertion error when the spy is called thrice",function(){return t(),t(),t(),expect(function(){return t.should.have.been.calledTwice}).to["throw"](AssertionError)})}),describe("calledThrice",function(){return it("should throw an assertion error when the spy is not called",function(){return expect(function(){return t.should.have.been.calledThrice}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called once",function(){return t(),expect(function(){return t.should.have.been.calledThrice}).to["throw"](AssertionError)}),it("should throw an assertion error when the spy is called twice",function(){return t(),t(),expect(function(){return t.should.have.been.calledThrice}).to["throw"](AssertionError)}),it("should not throw when the spy is called thrice",function(){return t(),t(),t(),expect(function(){return t.should.have.been.calledThrice}).to.not["throw"]()}),it("should throw an assertion error when the spy is called four times",function(){return t(),t(),t(),t(),expect(function(){return t.should.have.been.calledThrice}).to["throw"](AssertionError)})})})}).call(this);