(function(){var e;e=require("sinon"),describe("Messages",function(){return describe("about call count",function(){return it("should be correct for the base cases",function(){var t;return t=e.spy(),expect(function(){return t.should.have.been.called}).to["throw"]("expected spy to have been called at least once, but it was never called"),expect(function(){return t.should.have.been.calledOnce}).to["throw"]("expected spy to have been called exactly once, but it was called 0 times"),expect(function(){return t.should.have.been.calledTwice}).to["throw"]("expected spy to have been called exactly twice, but it was called 0 times"),expect(function(){return t.should.have.been.calledThrice}).to["throw"]("expected spy to have been called exactly thrice, but it was called 0 times"),expect(function(){return t.should.have.callCount(1)}).to["throw"]("expected spy to have been called exactly once, but it was called 0 times"),expect(function(){return t.should.have.callCount(4)}).to["throw"]("expected spy to have been called exactly 4 times, but it was called 0 times")}),it("should be correct for the negated cases",function(){var t,n,r,i;return n=e.spy(),i=e.spy(),r=e.spy(),t=e.spy(),n(),i(),i(),r(),r(),r(),t(),t(),t(),t(),expect(function(){return n.should.not.have.been.called}).to["throw"]("expected spy to not have been called"),expect(function(){return n.should.not.have.been.calledOnce}).to["throw"]("expected spy to not have been called exactly once"),expect(function(){return i.should.not.have.been.calledTwice}).to["throw"]("expected spy to not have been called exactly twice"),expect(function(){return r.should.not.have.been.calledThrice}).to["throw"]("expected spy to not have been called exactly thrice"),expect(function(){return n.should.not.have.callCount(1)}).to["throw"]("expected spy to not have been called exactly once"),expect(function(){return t.should.not.have.callCount(4)}).to["throw"]("expected spy to not have been called exactly 4 times")})}),describe("about call order",function(){return it("should be correct for the base cases",function(){var t,n;return t=e.spy(),n=e.spy(),t.displayName="spyA",n.displayName="spyB",expect(function(){return t.should.have.been.calledBefore(n)}).to["throw"]("expected spyA to have been called before function spyB() {}"),expect(function(){return n.should.have.been.calledAfter(t)}).to["throw"]("expected spyB to have been called after function spyA() {}")}),it("should be correct for the negated cases",function(){var t,n;return t=e.spy(),n=e.spy(),t.displayName="spyA",n.displayName="spyB",t(),n(),expect(function(){return t.should.not.have.been.calledBefore(n)}).to["throw"]("expected spyA to not have been called before function spyB() {}"),expect(function(){return n.should.not.have.been.calledAfter(t)}).to["throw"]("expected spyB to not have been called after function spyA() {}")})}),describe("about call context",function(){return it("should be correct for the basic case",function(){var t,n,r,i;return i=e.spy(),n={},t={x:"y"},i.call(t),r="expected spy to have been called with {  } as this, but it was called with "+i.printf("%t")+" instead",expect(function(){return i.should.have.been.calledOn(n)}).to["throw"](r),expect(function(){return i.getCall(0).should.have.been.calledOn(n)}).to["throw"](r)}),it("should be correct for the negated case",function(){var t,n,r;return r=e.spy(),t={},r.call(t),n="expected spy to not have been called with {  } as this",expect(function(){return r.should.not.have.been.calledOn(t)}).to["throw"](n),expect(function(){return r.getCall(0).should.not.have.been.calledOn(t)}).to["throw"](n)}),it("should be correct for the always case",function(){var t,n,r,i;return i=e.spy(),n={},t={x:"y"},i.call(t),r="expected spy to always have been called with {  } as this, but it was called with "+i.printf("%t")+" instead",expect(function(){return i.should.always.have.been.calledOn(n)}).to["throw"](r)})}),describe("about calling with new",function(){return it("should be correct for the basic case",function(){var t,n;return n=e.spy(),n(),t="expected spy to have been called with new",expect(function(){return n.should.have.been.calledWithNew}).to["throw"](t),expect(function(){return n.getCall(0).should.have.been.calledWithNew}).to["throw"](t)}),it("should be correct for the negated case",function(){var t,n;return n=e.spy(),new n,t="expected spy to not have been called with new",expect(function(){return n.should.not.have.been.calledWithNew}).to["throw"](t),expect(function(){return n.getCall(0).should.not.have.been.calledWithNew}).to["throw"](t)}),it("should be correct for the always case",function(){var t,n;return n=e.spy(),new n,n(),t="expected spy to always have been called with new",expect(function(){return n.should.always.have.been.calledWithNew}).to["throw"](t)})}),describe("about call arguments",function(){return it("should be correct for the basic cases",function(){var t;return t=e.spy(),t(1,2,3),expect(function(){return t.should.have.been.calledWith("a","b","c")}).to["throw"]("expected spy to have been called with arguments a, b, c\n    spy(1, 2, 3)"),expect(function(){return t.should.have.been.calledWithExactly("a","b","c")}).to["throw"]("expected spy to have been called with exact arguments a, b, c\n    spy(1, 2, 3)"),expect(function(){return t.should.have.been.calledWithMatch(e.match("foo"))}).to["throw"]('expected spy to have been called with arguments matching match("foo")\n    spy(1, 2, 3)'),expect(function(){return t.getCall(0).should.have.been.calledWith("a","b","c")}).to["throw"]("expected spy to have been called with arguments a, b, c\n    spy(1, 2, 3)"),expect(function(){return t.getCall(0).should.have.been.calledWithExactly("a","b","c")}).to["throw"]("expected spy to have been called with exact arguments a, b, c\n    spy(1, 2, 3)"),expect(function(){return t.getCall(0).should.have.been.calledWithMatch(e.match("foo"))}).to["throw"]('expected spy to have been called with arguments matching match("foo")\n    spy(1, 2, 3)')}),it("should be correct for the negated cases",function(){var t;return t=e.spy(),t(1,2,3),expect(function(){return t.should.not.have.been.calledWith(1,2,3)}).to["throw"]("expected spy to not have been called with arguments 1, 2, 3"),expect(function(){return t.should.not.have.been.calledWithExactly(1,2,3)}).to["throw"]("expected spy to not have been called with exact arguments 1, 2, 3"),expect(function(){return t.should.not.have.been.calledWithMatch(e.match(1))}).to["throw"]("expected spy to not have been called with arguments matching match(1)"),expect(function(){return t.getCall(0).should.not.have.been.calledWith(1,2,3)}).to["throw"]("expected spy to not have been called with arguments 1, 2, 3"),expect(function(){return t.getCall(0).should.not.have.been.calledWithExactly(1,2,3)}).to["throw"]("expected spy to not have been called with exact arguments 1, 2, 3"),expect(function(){return t.getCall(0).should.not.have.been.calledWithMatch(e.match(1))}).to["throw"]("expected spy to not have been called with arguments matching match(1)")}),it("should be correct for the always cases",function(){var t,n,r,i;return i=e.spy(),i(1,2,3),i("a","b","c"),t="expected spy to always have been called with arguments 1, 2, 3\n    spy(1, 2, 3)\n    spy(a, b, c)",expect(function(){return i.should.always.have.been.calledWith(1,2,3)}).to["throw"](t),n="expected spy to always have been called with exact arguments 1, 2, 3\n    spy(1, 2, 3)\n    spy(a, b, c)",expect(function(){return i.should.always.have.been.calledWithExactly(1,2,3)}).to["throw"](n),r="expected spy to always have been called with arguments matching match(1)\n    spy(1, 2, 3)\n    spy(a, b, c)",expect(function(){return i.should.always.have.been.calledWithMatch(e.match(1))}).to["throw"](r)})}),describe("about returning",function(){return it("should be correct for the basic case",function(){var t;return t=e.spy.create(function(){return 1}),t(),expect(function(){return t.should.have.returned(2)}).to["throw"]("expected spy to have returned 2"),expect(function(){return t.getCall(0).should.have.returned(2)}).to["throw"]("expected spy to have returned 2")}),it("should be correct for the negated case",function(){var t;return t=e.spy.create(function(){return 1}),t(),expect(function(){return t.should.not.have.returned(1)}).to["throw"]("expected spy to not have returned 1"),expect(function(){return t.getCall(0).should.not.have.returned(1)}).to["throw"]("expected spy to not have returned 1")}),it("should be correct for the always case",function(){var t;return t=e.spy.create(function(){return 1}),t(),expect(function(){return t.should.always.have.returned(2)}).to["throw"]("expected spy to always have returned 2")})}),describe("about throwing",function(){return it("should be correct for the basic cases",function(){var t,n;return t=e.spy(),n=e.spy.create(function(){throw new Error}),t(),swallow(n),expect(function(){return t.should.have.thrown()}).to["throw"]("expected spy to have thrown"),expect(function(){return t.getCall(0).should.have.thrown()}).to["throw"]("expected spy to have thrown"),expect(function(){return n.should.have.thrown("TypeError")}).to["throw"]("expected spy to have thrown TypeError"),expect(function(){return n.getCall(0).should.have.thrown("TypeError")}).to["throw"]("expected spy to have thrown TypeError"),expect(function(){return n.should.have.thrown({message:"x"})}).to["throw"]('expected spy to have thrown { message: "x" }'),expect(function(){return n.getCall(0).should.have.thrown({message:"x"})}).to["throw"]('expected spy to have thrown { message: "x" }')}),it("should be correct for the negated cases",function(){var t,n;return t=new Error("boo!"),n=e.spy.create(function(){throw t}),swallow(n),expect(function(){return n.should.not.have.thrown()}).to["throw"]("expected spy to not have thrown"),expect(function(){return n.getCall(0).should.not.have.thrown()}).to["throw"]("expected spy to not have thrown"),expect(function(){return n.should.not.have.thrown("Error")}).to["throw"]("expected spy to not have thrown Error"),expect(function(){return n.getCall(0).should.not.have.thrown("Error")}).to["throw"]("expected spy to not have thrown Error"),expect(function(){return n.should.not.have.thrown(t)}).to["throw"]("expected spy to not have thrown Error: boo!"),expect(function(){return n.getCall(0).should.not.have.thrown(t)}).to["throw"]("expected spy to not have thrown Error: boo!")}),it("should be correct for the always cases",function(){var t,n;return t=e.spy(),n=e.spy.create(function(){throw new Error}),t(),swallow(n),expect(function(){return t.should.have.always.thrown()}).to["throw"]("expected spy to always have thrown"),expect(function(){return n.should.have.always.thrown("TypeError")}).to["throw"]("expected spy to always have thrown TypeError"),expect(function(){return n.should.have.always.thrown({message:"x"})}).to["throw"]('expected spy to always have thrown { message: "x" }')})}),describe("when used on a non-spy/non-call",function(){var e;return e=function(){},it("should be informative for properties",function(){return expect(function(){return e.should.have.been.called}).to["throw"](TypeError,/not a spy/)}),it("should be informative for methods",function(){return expect(function(){return e.should.have.been.calledWith("foo")}).to["throw"](TypeError,/not a spy/)})})})}).call(this);