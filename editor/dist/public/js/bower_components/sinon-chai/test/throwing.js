(function(){var e;e=require("sinon"),describe("Throwing",function(){return describe("thrown()",function(){return it("should throw an assertion error if the spy does not throw at all",function(){var t;return t=e.spy.create(function(){}),t(),expect(function(){return t.should.have.thrown()}).to["throw"](AssertionError),expect(function(){return t.getCall(0).should.have.thrown()}).to["throw"](AssertionError)}),it("should not throw if the spy throws",function(){var t;return t=e.spy.create(function(){throw new Error}),swallow(t),expect(function(){return t.should.have.thrown()}).to.not["throw"](),expect(function(){return t.getCall(0).should.have.thrown()}).to.not["throw"]()}),it("should not throw if the spy throws once but not the next time",function(){var t;return t=e.spy.create(function(){if(!(t.callCount>1))throw new Error}),swallow(t),swallow(t),expect(function(){return t.should.have.thrown()}).to.not["throw"](),expect(function(){return t.getCall(0).should.have.thrown()}).to.not["throw"]()})}),describe("thrown(errorObject)",function(){var t;return t=null,beforeEach(function(){return t=new Error("boo!")}),it("should throw an assertion error if the spy does not throw at all",function(){var n;return n=e.spy.create(function(){}),n(),expect(function(){return n.should.have.thrown(t)}).to["throw"](AssertionError),expect(function(){return n.getCall(0).should.have.thrown(t)}).to["throw"](AssertionError)}),it("should throw an assertion error if the spy throws the wrong error",function(){var n;return n=e.spy.create(function(){return new Error("eek!")}),swallow(n),expect(function(){return n.should.have.thrown(t)}).to["throw"](AssertionError),expect(function(){return n.getCall(0).should.have.thrown(t)}).to["throw"](AssertionError)}),it("should not throw if the spy throws",function(){var n;return n=e.spy.create(function(){throw t}),swallow(n),expect(function(){return n.should.have.thrown(t)}).to.not["throw"](),expect(function(){return n.getCall(0).should.have.thrown(t)}).to.not["throw"]()}),it("should not throw if the spy throws once but not the next time",function(){var n;return n=e.spy.create(function(){if(!(n.callCount>1))throw t}),swallow(n),swallow(n),expect(function(){return n.should.have.thrown(t)}).to.not["throw"](),expect(function(){return n.getCall(0).should.have.thrown(t)}).to.not["throw"]()})}),describe("thrown(errorTypeString)",function(){var t;return t=null,beforeEach(function(){return t=new TypeError("boo!")}),it("should throw an assertion error if the spy does not throw at all",function(){var t;return t=e.spy.create(function(){}),t(),expect(function(){return t.should.have.thrown("TypeError")}).to["throw"](AssertionError),expect(function(){return t.getCall(0).should.have.thrown("TypeError")}).to["throw"](AssertionError)}),it("should throw an assertion error if the spy throws the wrong type of error",function(){var t;return t=e.spy.create(function(){throw new Error("boo!")}),swallow(t),expect(function(){return t.should.have.thrown("TypeError")}).to["throw"](AssertionError),expect(function(){return t.getCall(0).should.have.thrown("TypeError")}).to["throw"](AssertionError)}),it("should not throw if the spy throws the correct type of error",function(){var t;return t=e.spy.create(function(){throw new TypeError("eek!")}),swallow(t),expect(function(){return t.should.have.thrown("TypeError")}).to.not["throw"](),expect(function(){return t.getCall(0).should.have.thrown("TypeError")}).to.not["throw"]()}),it("should not throw if the spy throws once but not the next time",function(){var n;return n=e.spy.create(function(){if(!(n.callCount>1))throw t}),swallow(n),swallow(n),expect(function(){return n.should.have.thrown("TypeError")}).to.not["throw"](),expect(function(){return n.getCall(0).should.have.thrown("TypeError")}).to.not["throw"]()})}),describe("always thrown",function(){var t;return t=null,beforeEach(function(){return t=new TypeError("boo!")}),it("should throw an assertion error if the spy throws once but not the next time",function(){var n;return n=e.spy.create(function(){if(!(n.callCount>1))throw t}),swallow(n),swallow(n),expect(function(){return n.should.have.always.thrown()}).to["throw"](AssertionError),expect(function(){return n.should.always.have.thrown()}).to["throw"](AssertionError),expect(function(){return n.should.have.always.thrown(t)}).to["throw"](AssertionError),expect(function(){return n.should.always.have.thrown(t)}).to["throw"](AssertionError),expect(function(){return n.should.have.always.thrown("TypeError")}).to["throw"](AssertionError),expect(function(){return n.should.always.have.thrown("TypeError")}).to["throw"](AssertionError)}),it("should throw an assertion error if the spy throws the wrong error the second time",function(){var n;return n=e.spy.create(function(){throw n.callCount===1?t:new Error}),swallow(n),swallow(n),expect(function(){return n.should.have.always.thrown(t)}).to["throw"](AssertionError),expect(function(){return n.should.always.have.thrown(t)}).to["throw"](AssertionError),expect(function(){return n.should.have.always.thrown("TypeError")}).to["throw"](AssertionError),expect(function(){return n.should.always.have.thrown("TypeError")}).to["throw"](AssertionError)}),it("should not throw if the spy always throws the right error",function(){var n;return n=e.spy.create(function(){throw t}),swallow(n),swallow(n),expect(function(){return n.should.have.always.thrown(t)}).to.not["throw"](),expect(function(){return n.should.always.have.thrown(t)}).to.not["throw"](),expect(function(){return n.should.have.always.thrown("TypeError")}).to.not["throw"](),expect(function(){return n.should.always.have.thrown("TypeError")}).to.not["throw"]()})})})}).call(this);