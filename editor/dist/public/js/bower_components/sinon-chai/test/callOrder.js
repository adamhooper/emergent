(function(){var e;e=require("sinon"),describe("Call order",function(){var t,n;return t=null,n=null,beforeEach(function(){return t=e.spy(),n=e.spy()}),describe("spy1 calledBefore spy2",function(){return it("should throw an assertion error when neither spy is called",function(){return expect(function(){return t.should.have.been.calledBefore(n)}).to["throw"](AssertionError)}),it("should not throw when only spy 1 is called",function(){return t(),expect(function(){return t.should.have.been.calledBefore(n)}).to.not["throw"]()}),it("should throw an assertion error when only spy 2 is called",function(){return n(),expect(function(){return t.should.have.been.calledBefore(n)}).to["throw"](AssertionError)}),it("should not throw when spy 1 is called before spy 2",function(){return t(),n(),expect(function(){return t.should.have.been.calledBefore(n)}).to.not["throw"]()}),it("should throw an assertion error when spy 1 is called after spy 2",function(){return n(),t(),expect(function(){return t.should.have.been.calledBefore(n)}).to["throw"](AssertionError)})}),describe("spy1 calledAfter spy2",function(){return it("should throw an assertion error when neither spy is called",function(){return expect(function(){return t.should.have.been.calledAfter(n)}).to["throw"](AssertionError)}),it("should throw an assertion error when only spy 1 is called",function(){return t(),expect(function(){return t.should.have.been.calledAfter(n)}).to["throw"](AssertionError)}),it("should throw an assertion error when only spy 2 is called",function(){return n(),expect(function(){return t.should.have.been.calledAfter(n)}).to["throw"](AssertionError)}),it("should throw an assertion error when spy 1 is called before spy 2",function(){return t(),n(),expect(function(){return t.should.have.been.calledAfter(n)}).to["throw"](AssertionError)}),it("should not throw when spy 1 is called after spy 2",function(){return n(),t(),expect(function(){return t.should.have.been.calledAfter(n)}).to.not["throw"]()})})})}).call(this);