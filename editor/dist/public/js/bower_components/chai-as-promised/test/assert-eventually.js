(function(){describe("Assert interface with eventually extender:",function(e){return function(){var e;return e=null,describe("Direct tests of fulfilled promises",function(){return it(".eventually.isNull(promise)",function(e){return assert.eventually.isNull(fulfilledPromise(null)).notify(e)}),it(".eventually.isFunction(promise)",function(e){return assert.eventually.isFunction(fulfilledPromise(function(){})).notify(e)}),it(".eventually.typeOf(promise, 'string')",function(e){return assert.eventually.typeOf(fulfilledPromise("hello"),"string").notify(e)}),it(".eventually.include(promiseForString, 'substring')",function(e){return assert.eventually.include(fulfilledPromise("hello"),"hell").notify(e)}),it(".eventually.include(promiseForArray, arrayMember)",function(e){return assert.eventually.include(fulfilledPromise([1,2,3]),1).notify(e)})}),describe("On a promise fulfilled with the number 42",function(){return beforeEach(function(){return e=fulfilledPromise(42)}),describe(".eventually.isNull(promise)",function(){return shouldFail({op:function(){return assert.eventually.isNull(e)},message:"to equal null"})}),describe(".eventually.isDefined(promise)",function(){return shouldPass(function(){return assert.eventually.isDefined(e)})}),describe(".eventually.ok(promise)",function(){return shouldPass(function(){return assert.eventually.ok(e)})}),describe(".eventually.equal(promise, 42)",function(){return shouldPass(function(){return assert.eventually.equal(e,42)})}),describe(".eventually.equal(promise, 52)",function(){var t;return shouldFail({op:function(){return assert.eventually.equal(e,52)},message:"to equal 52"}),t=function(e){return it("should return a promise rejected with an assertion error that has actual/expected properties correct",function(t){return expect(e().then(function(){throw new Error("promise fulfilled")},function(e){return e.actual.should.equal(42),e.expected.should.equal(52)})).to.be.fulfilled.notify(t)})},describe("assert",function(){return t(function(){return assert.eventually.equal(e,52)})}),describe("expect",function(){return t(function(){return expect(e).to.eventually.equal(52)})}),describe("should",function(){return t(function(){return e.should.eventually.equal(52)})})}),describe(".eventually.notEqual(promise, 42)",function(){return shouldFail({op:function(){return assert.eventually.notEqual(e,42)},message:"to not equal 42"})}),describe(".eventually.notEqual(promise, 52)",function(){return shouldPass(function(){return assert.eventually.notEqual(e,52)})})}),describe("On a promise fulfilled with { foo: 'bar' }",function(){return beforeEach(function(){return e=fulfilledPromise({foo:"bar"})}),describe(".eventually.equal(promise, { foo: 'bar' })",function(){return shouldFail({op:function(){return assert.eventually.equal(e,{foo:"bar"})},message:"to equal { foo: 'bar' }"})}),describe(".eventually.deepEqual(promise, { foo: 'bar' })",function(){return shouldPass(function(){return assert.eventually.deepEqual(e,{foo:"bar"})})})}),describe("Assertion messages",function(){var e;return e="He told me enough! He told me you killed him!",describe("should pass through for .eventually.isNull(promise, message) for fulfilled",function(t){return shouldFail({op:function(){return assert.eventually.isNull(fulfilledPromise(42),e)},message:e})}),describe("should pass through for .eventually.isNull(promise, message) for rejected",function(t){return shouldFail({op:function(){return assert.eventually.isNull(rejectedPromise(),e)},message:e})}),describe("should pass through for .eventually.equal(promise, 52, message) for fulfilled",function(t){return shouldFail({op:function(){return assert.eventually.equal(fulfilledPromise(42),52,e)},message:e})}),describe("should pass through for .eventually.equal(promise, 52, message) for rejected",function(t){return shouldFail({op:function(){return assert.eventually.equal(rejectedPromise(),52,e)},message:e})})})}}(this))}).call(this);