(function(){describe("Promise-specific extensions:",function(e){return function(){var e,t,n;return n=null,t=new Error("boo"),e=function(e){return function(n){var r;try{expect(n).to.equal(t)}catch(i){return r=i,e(r)}return e()}},describe("when the promise is fulfilled",function(){return beforeEach(function(){return n=fulfilledPromise()}),describe(".fulfilled",function(){return shouldPass(function(){return n.should.be.fulfilled})}),describe(".not.fulfilled",function(){return shouldFail({op:function(){return n.should.not.be.fulfilled},message:"not to be fulfilled but it was fulfilled with undefined"})}),describe(".rejected",function(){return shouldFail({op:function(){return n.should.be.rejected},message:"to be rejected but it was fulfilled with undefined"})}),describe(".rejectedWith(TypeError)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError)},message:"to be rejected with 'TypeError' but it was fulfilled with undefined"})}),describe(".rejectedWith('message substring')",function(){return shouldFail({op:function(){return n.should.be.rejectedWith("message substring")},message:"to be rejected with an error including 'message substring' but it was fulfilled with undefined"})}),describe(".rejectedWith(/regexp/)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(/regexp/)},message:"to be rejected with an error matching /regexp/ but it was fulfilled with undefined"})}),describe(".rejectedWith(TypeError, 'message substring')",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError,"message substring")},message:"to be rejected with 'TypeError' but it was fulfilled with undefined"})}),describe(".rejectedWith(TypeError, /regexp/)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError,/regexp/)},message:"to be rejected with 'TypeError' but it was fulfilled with undefined"})}),describe(".rejectedWith(errorInstance)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(t)},message:"to be rejected with [Error: boo] but it was fulfilled with undefined"})}),describe(".not.rejected",function(){return shouldPass(function(){return n.should.not.be.rejected})}),describe(".not.rejectedWith(TypeError)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(TypeError)})}),describe(".not.rejectedWith('message substring')",function(){return shouldPass(function(){return n.should.not.be.rejectedWith("message substring")})}),describe(".not.rejectedWith(/regexp/)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(/regexp/)})}),describe(".not.rejectedWith(TypeError, 'message substring')",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(TypeError,"message substring")})}),describe(".not.rejectedWith(TypeError, /regexp/)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(TypeError,/regexp/)})}),describe(".not.rejectedWith(errorInstance)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(t)})}),describe(".should.notify(done)",function(){return it("should pass the test",function(e){return n.should.notify(e)})})}),describe("when the promise is rejected",function(){return beforeEach(function(){return n=rejectedPromise(t)}),describe(".fulfilled",function(){return shouldFail({op:function(){return n.should.be.fulfilled},message:"to be fulfilled but it was rejected with [Error: boo]"})}),describe(".not.fulfilled",function(){return shouldPass(function(){return n.should.not.be.fulfilled})}),describe(".rejected",function(){return shouldPass(function(){return n.should.be.rejected})}),describe(".rejectedWith(theError)",function(){return shouldPass(function(){return n.should.be.rejectedWith(t)})}),describe(".not.rejectedWith(theError)",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(t)},message:"not to be rejected with [Error: boo]"})}),describe(".rejectedWith(differentError)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(new Error)},message:"to be rejected with [Error] but it was rejected with [Error: boo]"})}),describe(".not.rejectedWith(differentError)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(new Error)})}),describe("with an Error having message 'foo bar'",function(){return beforeEach(function(){return n=rejectedPromise(new Error("foo bar"))}),describe(".rejectedWith('foo')",function(){return shouldPass(function(){return n.should.be.rejectedWith("foo")})}),describe(".rejectedWith(/bar/)",function(){return shouldPass(function(){return n.should.be.rejectedWith(/bar/)})}),describe(".rejectedWith('quux')",function(){return shouldFail({op:function(){return n.should.be.rejectedWith("quux")},message:"to be rejected with an error including 'quux' but got 'foo bar'"})}),describe(".rejectedWith(/quux/)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(/quux/)},message:"to be rejected with an error matching /quux/ but got 'foo bar'"})}),describe(".not.rejectedWith('foo')",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith("foo")},message:"not to be rejected with an error including 'foo'"})}),describe(".not.rejectedWith(/bar/)",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(/bar/)},message:"not to be rejected with an error matching /bar/"})}),describe(".not.rejectedWith('quux')",function(){return shouldPass(function(){return n.should.not.be.rejectedWith("quux")})}),describe(".not.rejectedWith(/quux/)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(/quux/)})})}),describe("with a RangeError",function(){return beforeEach(function(){return n=rejectedPromise(new RangeError)}),describe(".rejectedWith(RangeError)",function(){return shouldPass(function(){return n.should.be.rejectedWith(RangeError)})}),describe(".rejectedWith(TypeError)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError)},message:"to be rejected with 'TypeError' but it was rejected with [RangeError]"})}),describe(".not.rejectedWith(RangeError)",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(RangeError)},message:"not to be rejected with 'RangeError' but it was rejected with [RangeError]"})}),describe(".not.rejectedWith(TypeError)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(TypeError)})})}),describe("with a RangeError having a message 'foo bar'",function(){return beforeEach(function(){return n=rejectedPromise(new RangeError("foo bar"))}),describe(".rejectedWith(RangeError, 'foo')",function(){return shouldPass(function(){return n.should.be.rejectedWith(RangeError,"foo")})}),describe(".rejectedWith(RangeError, /bar/)",function(){return shouldPass(function(){return n.should.be.rejectedWith(RangeError,/bar/)})}),describe(".rejectedWith(RangeError, 'quux')",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(RangeError,"quux")},message:"to be rejected with an error including 'quux' but got 'foo bar'"})}),describe(".rejectedWith(RangeError, /quux/)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(RangeError,/quux/)},message:"to be rejected with an error matching /quux/ but got 'foo bar'"})}),describe(".rejectedWith(TypeError, 'foo')",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError)},message:"to be rejected with 'TypeError' but it was rejected with [RangeError: foo bar]"})}),describe(".rejectedWith(TypeError, /bar/)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError)},message:"to be rejected with 'TypeError' but it was rejected with [RangeError: foo bar]"})}),describe(".rejectedWith(TypeError, 'quux')",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError)},message:"to be rejected with 'TypeError' but it was rejected with [RangeError: foo bar]"})}),describe(".rejectedWith(TypeError, /quux/)",function(){return shouldFail({op:function(){return n.should.be.rejectedWith(TypeError)},message:"to be rejected with 'TypeError' but it was rejected with [RangeError: foo bar]"})}),describe(".not.rejectedWith(RangeError, 'foo')",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(RangeError)},message:"not to be rejected with 'RangeError' but it was rejected with [RangeError: foo bar]"})}),describe(".not.rejectedWith(RangeError, /bar/)",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(RangeError)},message:"not to be rejected with 'RangeError' but it was rejected with [RangeError: foo bar]"})}),describe(".not.rejectedWith(RangeError, 'quux')",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(RangeError)},message:"not to be rejected with 'RangeError' but it was rejected with [RangeError: foo bar]"})}),describe(".not.rejectedWith(RangeError, /quux/)",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(RangeError)},message:"not to be rejected with 'RangeError' but it was rejected with [RangeError: foo bar]"})}),describe(".not.rejectedWith(TypeError, 'foo')",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(TypeError,"foo")},message:"not to be rejected with an error including 'foo'"})}),describe(".not.rejectedWith(TypeError, /bar/)",function(){return shouldFail({op:function(){return n.should.not.be.rejectedWith(TypeError,/bar/)},message:"not to be rejected with an error matching /bar/"})}),describe(".not.rejectedWith(TypeError, 'quux')",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(TypeError,"quux")})}),describe(".not.rejectedWith(TypeError, /quux/)",function(){return shouldPass(function(){return n.should.not.be.rejectedWith(TypeError,/quux/)})})}),describe(".should.notify(done)",function(){return it("should fail the test with the original error",function(t){return n.should.notify(e(t))})})}),describe(".should.notify with chaining (GH-3)",function(){return describe("the original promise is fulfilled",function(){return beforeEach(function(){return n=fulfilledPromise()}),describe("and the follow-up promise is fulfilled",function(){return beforeEach(function(){return n=n.then(function(){})}),it("should pass the test",function(e){return n.should.notify(e)})}),describe("but the follow-up promise is rejected",function(){return beforeEach(function(){return n=n.then(function(){throw t})}),it("should fail the test with the error from the follow-up promise",function(t){return n.should.notify(e(t))})})}),describe("the original promise is rejected",function(){return beforeEach(function(){return n=rejectedPromise(t)}),describe("but the follow-up promise is fulfilled",function(){return beforeEach(function(){return n=n.then(function(){})}),it("should fail the test with the error from the original promise",function(t){return n.should.notify(e(t))})}),describe("and the follow-up promise is rejected",function(){return beforeEach(function(){return n=n.then(function(){throw new Error("follow up")})}),it("should fail the test with the error from the original promise",function(t){return n.should.notify(e(t))})})})}),describe("Using with non-thenables",function(){return describe("A number",function(){var e;return e=5,it("should fail for .fulfilled",function(){return expect(function(){return e.should.be.fulfilled}).to["throw"](TypeError,"not a thenable")}),it("should fail for .rejected",function(){return expect(function(){return e.should.be.rejected}).to["throw"](TypeError,"not a thenable")}),it("should fail for .become",function(){return expect(function(){return e.should.become(5)}).to["throw"](TypeError,"not a thenable")}),it("should fail for .eventually",function(){return expect(function(){return e.should.eventually.equal(5)}).to["throw"](TypeError,"not a thenable")}),it("should fail for .notify",function(){return expect(function(){return e.should.notify(function(){})}).to["throw"](TypeError,"not a thenable")})})}),describe("Using together with other Chai as Promised asserters",function(){return describe(".fulfilled.and.eventually.equal(42)",function(){return shouldPass(function(){return fulfilledPromise(42).should.be.fulfilled.and.eventually.equal(42)})}),describe(".fulfilled.and.rejected",function(){return shouldFail({op:function(){return fulfilledPromise(42).should.be.fulfilled.and.rejected},message:"to be rejected but it was fulfilled with 42"})}),describe(".rejected.and.eventually.equal(42)",function(){return shouldPass(function(){return rejectedPromise(42).should.be.rejected.and.eventually.equal(42)})}),describe(".rejected.and.become(42)",function(){return shouldPass(function(){return rejectedPromise(42).should.be.rejected.and.become(42)})})}),describe("With promises that only become rejected later (GH-24)",function(){return it("should wait for them",function(e){var t;return t=defer(),t.promise.should.be.rejectedWith("error message").and.notify(e),setTimeout(function(){return t.reject(new Error("error message"))},100)})}),describe("`rejectedWith` with non-`Error` rejection reasons (GH-33)",function(){return shouldPass(function(){return rejectedPromise(42).should.be.rejectedWith(42)})})}}(this))}).call(this);