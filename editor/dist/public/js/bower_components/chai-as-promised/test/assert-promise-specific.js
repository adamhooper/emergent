(function(){describe("Assert interface:",function(e){return function(){var e,t;return t=null,e=new Error("boo"),describe("when the promise is fulfilled",function(){return beforeEach(function(){return t=fulfilledPromise({foo:"bar"})}),describe(".isFulfilled(promise)",function(){return shouldPass(function(){return assert.isFulfilled(t)})}),describe(".becomes(promise, correctValue)",function(){return shouldPass(function(){return assert.becomes(t,{foo:"bar"})})}),describe(".becomes(promise, incorrectValue)",function(){return shouldFail({op:function(){return assert.becomes(t,{baz:"quux"})},message:"to deeply equal { baz: 'quux' }"})}),describe(".doesNotBecome(promise, correctValue)",function(){return shouldFail({op:function(){return assert.doesNotBecome(t,{foo:"bar"})},message:"to not deeply equal { foo: 'bar' }"})}),describe(".doesNotBecome(promise, incorrectValue)",function(){return shouldPass(function(){return assert.doesNotBecome(t,{baz:"quux"})})}),describe(".isRejected(promise)",function(){return shouldFail({op:function(){return assert.isRejected(t)},message:"to be rejected"})}),describe(".isRejected(promise, TypeError)",function(){return shouldFail({op:function(){return assert.isRejected(t,TypeError)},message:"to be rejected"})}),describe(".isRejected(promise, /regexp/)",function(){return shouldFail({op:function(){return assert.isRejected(t,/regexp/)},message:"to be rejected"})}),describe(".isRejected(promise, /regexp/)",function(){return shouldFail({op:function(){return assert.isRejected(t,TypeError,/regexp/)},message:"to be rejected"})}),describe(".isRejected(promise, errorInstance)",function(){return shouldFail({op:function(){return assert.isRejected(t,e)},message:"to be rejected"})})}),describe("when the promise is rejected",function(){return beforeEach(function(){return t=rejectedPromise(e)}),describe(".isFulfilled",function(){return shouldFail({op:function(){return assert.isFulfilled(t)},message:"to be fulfilled"})}),describe(".isRejected(promise, theError)",function(){return shouldPass(function(){return assert.isRejected(t,e)})}),describe(".isRejected(promise, differentError)",function(){return shouldFail({op:function(){return assert.isRejected(t,new Error)},message:"to be rejected with"})}),describe("with an Error having message 'foo bar'",function(){return beforeEach(function(){return t=rejectedPromise(new Error("foo bar"))}),describe(".isRejected(promise, /bar/)",function(){return shouldPass(function(){return assert.isRejected(t,/bar/)})}),describe(".isRejected(promise, /quux/)",function(){return shouldFail({op:function(){return assert.isRejected(t,/quux/)},message:"to be rejected with"})})}),describe("with a RangeError",function(){return beforeEach(function(){return t=rejectedPromise(new RangeError)}),describe(".isRejected(promise, RangeError)",function(){return shouldPass(function(){return assert.isRejected(t,RangeError)})}),describe(".isRejected(promise, TypeError)",function(){return shouldFail({op:function(){return assert.isRejected(t,TypeError)},message:"to be rejected"})})})}),describe("Assertion messages",function(){var e;return e="No. I am your father.",describe("should be passed through for .isFulfilled(promise, message)",function(){return shouldFail({op:function(){return assert.isFulfilled(rejectedPromise(),e)},message:e})}),describe("should be passed through for .isRejected(promise, message)",function(){return shouldFail({op:function(){return assert.isRejected(fulfilledPromise(),e)},message:e})}),describe("should be passed through for .isRejected(promise, TypeError, message)",function(){return shouldFail({op:function(){return assert.isRejected(fulfilledPromise(),TypeError,e)},message:e})}),describe("should be passed through for .isRejected(promise, /regexp/, message)",function(){return shouldFail({op:function(){return assert.isRejected(fulfilledPromise(),/regexp/,e)},message:e})}),describe("should be passed through for .becomes(promise, incorrectValue, message)",function(){return shouldFail({op:function(){return assert.becomes(fulfilledPromise({baz:"quux"}),{foo:"bar"},e)},message:e})}),describe("should be passed through for .doesNotBecome(promise, incorrectValue, message)",function(){return shouldFail({op:function(){return assert.doesNotBecome(fulfilledPromise({foo:"bar"}),{foo:"bar"},e)},message:e})})})}}(this))}).call(this);